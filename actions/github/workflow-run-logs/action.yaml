name: workflow-run-logs
description: Fetches the workflow run logs for a job or step 

author: vionix

branding:
  icon: anchor
  color: blue

inputs:
  github-org-repo:
    description: "The org/repo for the query"
    required: false
    default: ${{ github.repository }}
  workflow-run-id:
    description: "The ID of the workflow run from "
    required: true
  workflow-run-attempt-number:
    description: "The run attempt number for the execution"
    required: true
  filter-by-step-name:
    description: "The name of the step specified"
    required: false
  github-token:
    description: "The github token"
    required: true

outputs:
  log-content:
    description: "The contents of the log file"
    value: ${{ steps.parse-logs.outputs.content }}

  log-file:
    description: "The file with the contents of the log"
    value: ${{ steps.parse-logs.outputs.log-file }}

runs:
  using: composite
    
  steps:
    - name: Download the logs from run from ${{ inputs.github-org-repo }}/actions/runs/${{ inputs.workflow-run-id }}/attemps/${{ inputs.workflow-run-attempt-number }}/logs
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "Calling ${GITHUB_API_URL}/repos/${{ inputs.github-org-repo }}/actions/runs/${{ inputs.workflow-run-id }}/attemps/${{ inputs.workflow-run-attempt-number }}/logs" 

        # Initialize variables
        MAX_ATTEMPTS=10
        ATTEMPT=1
        BACKOFF_TIME=2  # Starting backoff time in seconds
        SUCCESS=false
        URL=${GITHUB_API_URL}/repos/${{ inputs.github-org-repo }}/actions/runs/${{ inputs.workflow-run-id }}/attempts/${{ inputs.workflow-run-attempt-number }}/logs

        # Remove any existing file to ensure we don't get false positives
        rm -f run.logs.zip
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = false ]; do
          echo "Attempt $ATTEMPT of $MAX_ATTEMPTS (waiting ${BACKOFF_TIME}s before retry)"
          
          # Download the file
          curl -L -H "Authorization: Bearer ${{ inputs.github-token }}" -o run.logs.zip $URL
          
          # Check if the file exists and is not empty
          if [ -f run.logs.zip ] && [ -s run.logs.zip ]; then
            # Verify it's a valid zip file
            if unzip -t run.logs.zip >/dev/null 2>&1; then
              echo "Downloaded the zip file successfully on attempt $ATTEMPT"
              SUCCESS=true
            else
              echo "Downloaded file is not a valid zip file, retrying..."
              rm -f run.logs.zip
            fi
          else
            echo "Failed to download the logs or file is empty, retrying..."
          fi
          
          # If not successful and not the last attempt, wait before retrying
          if [ "$SUCCESS" = false ] && [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            sleep $BACKOFF_TIME
            # Exponential backoff: double the wait time for next attempt
            BACKOFF_TIME=$((BACKOFF_TIME * 2))
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        # Final check after all attempts
        if [ "$SUCCESS" = true ]; then
          ls -la run.logs.zip
          echo "Download successful after ${MAX_ATTEMPTS} exponential backoff attempts!"
        else
          echo "Failed to download the logs for ${URL} after $MAX_ATTEMPTS attempts"
          exit 1
        fi

    - name: Unzip the downloaded zip file unzip run.logs
      shell: bash
      run: |
        echo "Unziping run.logs.zip"
        unzip run.logs.zip

    - name: Find the logs by Step name '${{ inputs.filter-by-step-name }}'
      id: parse-logs
      shell: bash
      run: |
        echo "Finding the file with the same '${{ inputs.filter-by-step-name }}'"
        find . -name "*${{ inputs.filter-by-step-name }}*" -not -name "*Post*" -print0
        FILE_NAME=$(find . -name "*${{ inputs.filter-by-step-name }}*" -not -name "*Post*" -print0)
        echo "Attempt to find: '${FILE_NAME}'"

        if [ "${FILE_NAME}" != '' ]; then
          echo "::notice ::Loading workflow logs from file: '${FILE_NAME}'"

          cat "${FILE_NAME}" > log-content.log
          echo "log-file=log-content.log" >> $GITHUB_OUTPUT
          echo 'content<<EOF' >> $GITHUB_OUTPUT
          cat "${FILE_NAME}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          echo "Current logs content --------"
          cat "${FILE_NAME}"
          echo "--------------"

        else
          echo "::error ::Couldn't find workflow logs with name '${{ inputs.filter-by-step-name }}'"
          echo "content=" >> $GITHUB_OUTPUT
        fi
