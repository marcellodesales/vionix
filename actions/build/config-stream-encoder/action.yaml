name: Generates base64 stream of configuration required
description: Generate a stream value in base64 format of any file, including binary

author: seceng-devsecops-platform

branding:
  icon: anchor
  color: blue

inputs:
  file-paths:
    description: "The content of the .env file to be loaded"
    required: true

  dir-paths:
    description: "The content of the .env file to be loaded"
    required: true

  runner-platform:
    description: "The platform of the config stream converter linux/amd64, linux/arm64 for the specific runner platform"
    required: false
    default: linux/amd64

outputs:
  base64-stream:
    description: "The stream value to be used for configuration"
    value: ${{ steps.response.outputs.base64Stream }}

runs:
  using: composite
  steps:

    - name: Show the current env
      shell: bash
      run: env

    - name: Setup additional credentials based on the given .env file
      shell: bash
      env:
        FILE_PATHS: '${{ inputs.file-paths }}'
        DIR_PATHS: '${{ inputs.dir-paths }}'
      run: |
        if [ "${FILE_PATHS}" != "" ]; then
          FILE_PATHS=$(echo "${FILE_PATHS}" | tr '\n' ' ')
          echo "Zipping the provided file paths: ${FILE_PATHS}"
        fi

        if [ "${DIR_PATHS}" != "" ]; then
          echo "Checking if all dirs in the list '${DIR_PATHS}' exists..."
          for dir in $($DIR_PATHS); do 
            echo "Provided dir path is $dir";
            if [ ! -d ${dir} ]; then
              echo "The provided dir path ${dir} is not a directory!"
              exit 1
            fi
          done
          DIR_PATHS=$(echo "${DIR_PATHS}" | tr '\n' ' ')
          echo "Zipping the provided dir paths: ${DIR_PATHS}"
        fi

        if [ -f config-stream.tar.gz ]; then
          echo "Deleting existing file ${config-stream.tar.gz}"
          rm -f config-stream.tar.gz
        fi

        echo "Creating config stream with tar -czvf config-stream.tar.gz ${FILE_PATHS} ${DIR_PATHS}"
        tar -czvf config-stream.tar.gz ${FILE_PATHS} ${DIR_PATHS}

        echo "Making sure they are in place"
        tar -tvf config-stream.tar.gz

    - name: Set up for streaming file for the output
      id: response
      shell: bash
      env:
        DOCKER_DEFAULT_PLATFORM: ${{ inputs.runner-platform }}
      run: |
        echo "Convert the file to base64 stream config-stream.tar.gz to config-stream.base64"
        docker run -v $(pwd):$(pwd) -w $(pwd) dockerhub.docker.artifactory.viasat.com/schmitzi/openssl-alpine-j11:1.1.0 openssl base64 -e -A -in config-stream.tar.gz -out config-stream.base64
        ls -la config-stream.base64

        BASE64_STREAM=$(cat config-stream.base64)

        echo "Verifying the config stream"
        base64 -d config-stream.base64 > config-stream.tar.gz.original
        ls -la config-stream.tar.gz.original
        ls -la config-stream.tar.gz

        echo "base64Stream=${BASE64_STREAM}" >> $GITHUB_OUTPUT
