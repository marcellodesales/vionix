name: prisma-cloud-scan-reporter
description: Generates the prisma cloud reports to md file and workflow summary

inputs:
  git-revision:
    description: 'The reference to the git sha'
    required: true

  docker-image-repo-tag:
    description: 'The full docker image repo:tag'
    required: true
  
  docker-image-registry-url:
    description: 'The URL to view details about the image repo:tag'
    required: true

  prisma-cloud-domain: 
    description: 'The domain of the prisma cloud server'
    required: true  

  prisma-cloud-project:
    description: 'The name of the project in prisma cloud to report to'
    required: true
  
  prisma-cloud-report-file-path:
    description: 'The path to the report file generated by the prisma cloud action'
    required: true

  prisma-cloud-scan-results-url:
    description: 'The scan results url by the prisma cloud action'
    required: true
  
  prisma-cloud-scan-exit-status-code:
    description: 'The scan exit status code'
    required: true

  prisma-cloud-scan-errors:
    description: 'The scan results url by the prisma cloud action'
    required: true

outputs:
  image-scan-report-file-path:
    description: The path where the reports are located
    value: ${{ steps.report-generator.outputs.image-scan-report-file-path }}

  image-scan-report-value:
    description: The value of the report
    value: ${{ steps.report-generator.outputs.image-scan-report-value }}

runs:
  using: "composite"
  steps:
    - name: Generate the prisma cloud report for ${{ inputs.docker-image-repo-tag }}
      id: report-generator
      shell: bash
      run: |
        if [ -f ${{ inputs.prisma-cloud-report-file-path }} ]; then
          echo "Scan results file: ${{ inputs.prisma-cloud-report-file-path }}"
          cat ${{ inputs.prisma-cloud-report-file-path }}

        else
          echo "::error title=File path '${{ inputs.prisma-cloud-report-file-path }}' does NOT exist"
          exit 1
        fi

        echo "# :microscope: Scan of ${{ inputs.docker-image-repo-tag }}" >> prisma-cloud-report.md
        echo "" >> prisma-cloud-report.md
        echo "> * **Prisma Cloud Domain**: ${{ inputs.prisma-cloud-domain }}" >> prisma-cloud-report.md
        echo "> * **Project Name**: ${{ inputs.prisma-cloud-project }}" >> prisma-cloud-report.md
        echo "See Prisma Cloud results at ${{ inputs.prisma-cloud-scan-results-url }}" >> prisma-cloud-report.md

        echo "### :whale: Artifactory Repository" >> prisma-cloud-report.md
        echo "" >> prisma-cloud-report.md
        echo "> * Revision: ${{ inputs.git-revision }}" >> prisma-cloud-report.md
        echo "> * **Docker Image**: [${{ inputs.docker-image-repo-tag }}](${{ inputs.docker-image-registry-url }})" >> prisma-cloud-report.md
        echo "> Review each layer in Artifactory and update the code here to improve the report below" >> prisma-cloud-report.md
        echo "> * Formatted by Vionix DevSecOps Platform" >> prisma-cloud-report.md

        if [ "${{ inputs.prisma-cloud-scan-errors }}" != "" ]; then
          echo "" >> prisma-cloud-report.md
          echo "## :police-car-light: ERROR SCANNING: exit ${{ inputs.prisma-cloud-scan-exit-status-code }} while Scanning docker image" >> prisma-cloud-report.md
          echo "* ${{ inputs.prisma-cloud-scan-errors }}" >> $GITHUB_STEP_SUMMARY
          echo "::error title=${{ inputs.prisma-cloud-scan-exit-status-code }} Error while Scanning with Prisma Cloud::${{ inputs.prisma-cloud-scan-errors }}"
          exit 2

        else
          count_critical=$(cat ${{ inputs.prisma-cloud-report-file-path }} | jq -r '.results[0].vulnerabilityDistribution.critical')
          count_high=$(cat ${{ inputs.prisma-cloud-report-file-path }} | jq -r '.results[0].vulnerabilityDistribution.high')
          medium=$(cat ${{ inputs.prisma-cloud-report-file-path }} | jq -r '.results[0].vulnerabilityDistribution.medium')
          low=$(cat ${{ inputs.prisma-cloud-report-file-path }} | jq -r '.results[0].vulnerabilityDistribution.low')
          total_count=$(cat ${{ inputs.prisma-cloud-report-file-path }} | jq -r '.results[0].vulnerabilityDistribution.total')

          count_lowers=$((medium+low))
          echo ">" >> prisma-cloud-report.md
          echo "> (${total_count}) üö® ${count_critical} critical ‚ö†Ô∏è ${count_high} high ‚ÑπÔ∏è ${medium} medium ‚ùì ${low} low  " >> prisma-cloud-report.md

          echo "" >> prisma-cloud-report.md
          echo "| ID | STATUS | CVSS | PACKAGE | PUBLISHED | DESCRIPTION |" >> header-prisma-cloud-report.md
          echo "|----|--------|------|---------|-----------|-------------|" >> header-prisma-cloud-report.md

          cat header-prisma-cloud-report.md >> critical-prisma-cloud-report-table.md;
          cat header-prisma-cloud-report.md >> high-prisma-cloud-report-table.md;
          cat header-prisma-cloud-report.md >> lowers-prisma-cloud-report-table.md;

          jq -r '.results[0].vulnerabilities[] | [.id, .status, .cvss, .packageName, .packageVersion, .severity, .publishedDate, .discoveredDate, .description] | @tsv' "${{ inputs.prisma-cloud-report-file-path }}" | \
          while IFS=$'\t' read -r id status cvss packageName packageVersion severity publishedDate discoveredDate description; do
            if [ "${severity}" == "critical" ]; then
              echo "| [${id}](https://nvd.nist.gov/vuln/detail/${id}) | ${status} | [${cvss}](https://www.sans.org/blog/what-is-cvss/) ${severity} | ${packageName}@${packageVersion} | ${publishedDate} | ${description} |" >> critical-prisma-cloud-report-table.md;

            elif [ "${severity}" == "high" ]; then
              echo "| [${id}](https://nvd.nist.gov/vuln/detail/${id}) | ${status} | [${cvss}](https://www.sans.org/blog/what-is-cvss/) ${severity} | ${packageName}@${packageVersion} | ${publishedDate} | ${description} |" >> high-prisma-cloud-report-table.md;

            else
              echo "| [${id}](https://nvd.nist.gov/vuln/detail/${id}) | ${status} | [${cvss}](https://www.sans.org/blog/what-is-cvss/) ${severity} | ${packageName}@${packageVersion} | ${publishedDate} | ${description} |" >> lowers-prisma-cloud-report-table.md;
            fi
          done

          echo "## üö® There are ${count_critical} critical CVEs" >> prisma-cloud-report.md
          echo "> * **FSP Compliance Policy**: [resolve them ASAP!](https://scorecard.infosec.viasat.io/faq)" >> prisma-cloud-report.md
          echo "<details><summary>üö® See all the ${count_critical} results with links to https://nvd.nist.gov/vuln/detail</summary>" >> prisma-cloud-report.md
          echo "" >> prisma-cloud-report.md
          cat critical-prisma-cloud-report-table.md >> prisma-cloud-report.md
          echo "</details>" >> prisma-cloud-report.md
          echo "" >> prisma-cloud-report.md

          echo "## ‚ö†Ô∏è There are ${count_high} high CVEs" >> prisma-cloud-report.md
          echo "> * **FSP Compliance Policy**: [resolve them soon!](https://scorecard.infosec.viasat.io/faq)" >> prisma-cloud-report.md
          echo "<details><summary>‚ö†Ô∏è See all the ${count_high} results with links to https://nvd.nist.gov/vuln/detail</summary>" >> prisma-cloud-report.md
          echo "" >> prisma-cloud-report.md
          cat high-prisma-cloud-report-table.md >> prisma-cloud-report.md
          echo "</details>" >> prisma-cloud-report.md
          echo "" >> prisma-cloud-report.md

          echo "## ‚ÑπÔ∏è There are ${count_lowers} medium and low CVEs" >> prisma-cloud-report.md
          echo "> * **FSP Compliance Policy**: [plan to remove them!](https://scorecard.infosec.viasat.io/faq)" >> prisma-cloud-report.md
          echo "<details><summary>‚ÑπÔ∏è See all the ${count_lowers} results with links to https://nvd.nist.gov/vuln/detail</summary>" >> prisma-cloud-report.md
          echo "" >> prisma-cloud-report.md
          cat lowers-prisma-cloud-report-table.md >> prisma-cloud-report.md
          echo "</details>" >> prisma-cloud-report.md
          echo "" >> prisma-cloud-report.md

          cat prisma-cloud-report.md >> $GITHUB_STEP_SUMMARY;
        fi

        echo "image-scan-report-file-path=prisma-cloud-report.md" >> $GITHUB_OUTPUT
        echo 'image-scan-report-value<<EOF' >> $GITHUB_OUTPUT
        cat prisma-cloud-report.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        cat prisma-cloud-report.md >> $GITHUB_STEP_SUMMARY
