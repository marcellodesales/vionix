####
#### Author: Marcello DeSales (@mdesales)
####
# Viasat DevSecOps Platform workflow for Kubernetes CloudNative CD deployments

name: kubernetes-kustomize-devsecops-workflow

on:
  # Manual workflow execution
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  # https://github.com/actions/runner/issues/1483#issuecomment-969295757
  # https://github.com/orgs/community/discussions/25595#discussioncomment-3248417
  workflow_call:
    inputs:
      seceng-devsecops-dind-runner-label:
        description: "Docker-in-docker (dind) runner to use base label"
        required: false
        type: string
        # Base image for the label is at https://git.viasat.com/seceng-devsecops-platform/devsecops-platform-runtime-github_actions_runner
        default: devsecops

      kubectl-version:
        description: "The version of Kubectl to use"
        required: false
        type: string
        default: v1.22.0

      continue-on-yamllint-errors:
        description: "Whether or not we continue running the workflow when yamllint errors are found"
        required: false
        type: string
        default: true

      yamllint-config:
        description: "The configuration for yamllint"
        required: false
        type: string
        default: |
          extends: default
          rules:
            line-length: disable
            document-start: disable
            empty-lines:
              level: warning
            new-line-at-end-of-file:
              level: warning
            trailing-spaces:
              level: warning

      kustomize-version:
        description: "The version of kustomization to use"
        required: false
        type: string
        default: "."

      argocd-server:
        description: "The ArgoCD server to use"
        required: false
        type: string
        default: https://argo-cd.viarise.viasat.io

    # We need to declare the intent of secrets. The pipelines reusing this must declare them!
    # https://github.com/orgs/community/discussions/26749#discussioncomment-3253230
    secrets:
      KUBERNETES_KUBECONFIG:
        description: "The base64 value of HOME/.kube/config to access the cluster"
        required: false

      ARTIFACTORY_SVC_USER:
        description: "The username of the service account for Artifactory Docker registry Repository"
        required: false

      ARTIFACTORY_SVC_PASS:
        description: "The password associated with the username of the service account for Artifactory Docker registry Repository"
        required: false

      SLACK_CHANNEL_AUTOMATION_ID:
        description: "The Slack Automation ID"
        required: false

      SLACK_CHANNEL_AUTOMATION_TOKEN:
        description: "The token for the given Slack channel ID"
        required: false


# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:

  code:
    name: 🔧 code
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    permissions:
      # Maybe to get twistlock action to run we need permission to read
      # https://github.com/actions/checkout/issues/254#issuecomment-1166945991
      contents: read  # <--- allows to read repo
      # Enable pull request reads for 8BitJonny/gh-get-current-pr, avoid error "Resource not accessible by integration"
      # https://github.com/actions/first-interaction/issues/10#issuecomment-1232740076
      pull-requests: read

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      # >> $GITHUB_OUTPUT in each of the steps[name].outputs is defined is where these are defined for the job
      githubActionJobName: ${{steps.set_base_values.outputs.githubActionJobName}}
      githubActionJobUrl: ${{steps.set_base_values.outputs.githubActionJobUrl}}
      githubActionRunId: ${{steps.set_base_values.outputs.githubActionRunId}}
      githubOrg: ${{steps.set_base_values.outputs.githubOrg}}
      defaultDockerImageVersion: ${{steps.set_base_values.outputs.defaultDockerImageVersion}}
      defaultDockerImageBranchTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchTag}}
      defaultDockerImageBranchShaTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchShaTag}}
      defaultDockerImageBranchTagForVersion: ${{steps.set_base_values.outputs.defaultDockerImageBranchTagForVersion}}
      dockerContextPath: ${{steps.set_base_values.outputs.dockerContextPath}}
      jobStartTimestamp: ${{steps.set_base_values.outputs.jobStartTimestamp}}
      gitShortSha: ${{steps.set_base_values.outputs.gitShortSha}}
      committerName: ${{steps.set_base_values.outputs.committerName}}
      committerEmail: ${{steps.set_base_values.outputs.committerEmail}}
      buildDateTime: ${{steps.set_base_values.outputs.buildDateTime}}
      gitopsDeployEnv: ${{steps.set_base_values.outputs.gitopsDeployEnv}}
      gitopsDeployUrl: ${{steps.set_base_values.outputs.gitopsDeployUrl}}
      gitopsDeploySegment: ${{steps.set_base_values.outputs.gitopsDeploySegment}}
      gitopsDeployTargetRepo: ${{steps.set_base_values.outputs.gitopsDeployTargetRepo}}
      gitopsDeployTargetRepoBranch: ${{steps.set_base_values.outputs.gitopsDeployTargetRepoBranch}}
      gitopsDeployTargetProvider: ${{steps.set_base_values.outputs.gitopsDeployTargetProvider}}
      gitopsDeployTargetRegion: ${{steps.set_base_values.outputs.gitopsDeployTargetRegion}}
      gitopsDeployTargetType: ${{steps.set_base_values.outputs.gitopsDeployTargetType}}
      gitopsDeployVersion: ${{steps.set_base_values.outputs.gitopsDeployVersion}}
      hasKubeconfig: ${{steps.set-base-values.outputs.hasKubeconfig}}

    steps:
      - name: Provided input to the app
        run: |
          echo "Inputs=${{ toJSON(inputs) }}"

      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🔧 \`code\` Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :white_check_mark: Set environment variables" >> $GITHUB_STEP_SUMMARY
          #echo "## :recycle: Needs refactoring" >> $GITHUB_STEP_SUMMARY
          #echo "* Installed latest git to self-hosted to be able to see the .git metadata dir " >> $GITHUB_STEP_SUMMARY
          #echo "  * https://github.com/actions/checkout/issues/335#issuecomment-763159788 " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Fetch all history and have .git locally for inspection
        uses: viarise/checkout@v3.5.3
        with:
          fetch-depth: 0

      # Write directly to GITHUB_ENV so that all steps have access to the same values
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#passing-values-between-steps-and-jobs-in-a-workflow
      - name: Set default envs from for tags and names
        run: |
          env
          echo "DEFAULT_DOCKER_IMAGE_VERSION=${GITHUB_SHA}" >> $GITHUB_ENV
          # The repo name only without refs
          # https://stackoverflow.com/questions/13570327/how-to-delete-a-substring-using-shell-script/46104342#46104342
          REMOVE="refs/heads/"
          BRANCH_TAG=${GITHUB_REF/$REMOVE/}
          REMOVE="refs/tags/"
          BRANCH_TAG=${BRANCH_TAG/$REMOVE/}
          echo "BRANCH_TAG=${BRANCH_TAG}" >> $GITHUB_ENV
          # Remove the / from topic branches for versions, etc:
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG} | sed -e 's/\//-/g')
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG_FOR_VERSION} | sed -e 's/#/-/g')
          echo "BRANCH_TAG_FOR_VERSION=${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # The branch and sha together makes it easier to find
          GIT_SHORT_SHA=${GITHUB_SHA:0:7}
          echo "GIT_SHORT_SHA=${GIT_SHORT_SHA}" >> $GITHUB_ENV
          echo "BRANCH_SHA_TAG=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APP_VERSION=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # For the job run
          echo "BUILD_JOB_NAME=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "BUILD_JOB_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          # https://stackoverflow.com/questions/60942067/get-current-date-and-time-in-github-workflows/60942437#60942437
          BUILD_DATE_TIME=$(date +'%Y-%m-%d %H:%m:%S %Z')
          echo "BUILD_DATE_TIME=${BUILD_DATE_TIME}" >> $GITHUB_ENV
          JOB_TIMESTAMP=$(date +%s)
          echo "JOB_TIMESTAMP=${JOB_TIMESTAMP}" >> $GITHUB_ENV
          # https://git-scm.com/docs/git-show
          COMMITTER_NAME=$(git --no-pager show -s --format="%an")
          echo "COMMITTER_NAME=${COMMITTER_NAME}" >> $GITHUB_ENV
          COMMITTER_EMAIL=$(git --no-pager show -s --format="%ae")
          echo "COMMITTER_EMAIL=${COMMITTER_EMAIL}" >> $GITHUB_ENV
          env

      - name: Setting values
        id: set_base_values
        run: |
          echo "githubActionJobName=$BUILD_JOB_NAME" >> $GITHUB_OUTPUT  # Duplicate without braces
          echo "githubActionJobUrl=$BUILD_JOB_URL" >> $GITHUB_OUTPUT  # Duplicate without braces
          echo "githubActionRunId=$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
          echo "dockerContextPath=${{ inputs.docker-compose-context }}" >> $GITHUB_OUTPUT
          echo "defaultDockerImageVersion=$DEFAULT_DOCKER_IMAGE_VERSION" >> $GITHUB_OUTPUT  # Duplicate
          echo "defaultDockerImageBranchTag=$BRANCH_TAG" >> $GITHUB_OUTPUT  # Duplicate
          echo "defaultDockerImageBranchTagForVersion=$BRANCH_TAG_FOR_VERSION" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchShaTag=$BRANCH_SHA_TAG" >> $GITHUB_OUTPUT  # Duplicate
          echo "gitShortSha=$GIT_SHORT_SHA" >> $GITHUB_OUTPUT  # Duplicate
          echo "buildDateTime=$BUILD_DATE_TIME" >> $GITHUB_OUTPUT  # Duplicate
          echo "jobStartTimestamp=$JOB_TIMESTAMP" >> $GITHUB_OUTPUT  # Duplicate
          echo "committerName=$COMMITTER_NAME" >> $GITHUB_OUTPUT  # Duplicate
          echo "committerEmail=$COMMITTER_EMAIL" >> $GITHUB_OUTPUT  # Duplicate
          echo "githubOrg=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_OUTPUT  # Unused

      # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
      - name: Annotate Job with current information
        if: ${{ inputs.gitops-deploy-workflow != '' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref_type == 'tag') }}
        run: |
          echo "```json" >> $GITHUB_STEP_SUMMARY
          for JSON_LINE in "${{ toJSON(steps.set_base_values.outputs) }}"; do
            echo "${JSON_LINE}" >> $GITHUB_STEP_SUMMARY
          done
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "## :page_facing_up: Metadata output" >> $GITHUB_STEP_SUMMARY
          echo "# :building_construction: Deployment Plan" >> $GITHUB_STEP_SUMMARY
          echo "* :octocat: Deploy repo: ${GITOPS_TARGET_REPO}" >> $GITHUB_STEP_SUMMARY
          echo "* :herb: Deploy repo branch: ${GITOPS_TARGET_REPO_BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "* :cloud: Provider: ${GITOPS_TARGET_PROVIDER}" >> $GITHUB_STEP_SUMMARY
          echo "* :world_map: Region: ${GITOPS_TARGET_REGION}" >> $GITHUB_STEP_SUMMARY
          echo "* :compass: Segment: ${GITOPS_TARGET_SEGMENT}" >> $GITHUB_STEP_SUMMARY
          echo "* :ice_cube: Type: ${GITOPS_TARGET_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "* :canoe: Env: ${GITOPS_TARGET_ENV}" >> $GITHUB_STEP_SUMMARY
          echo "* :link: Env Url: ${GITOPS_TARGET_URL}" >> $GITHUB_STEP_SUMMARY

      - uses: seceng-devsecops-platform/8BitJonny-gh-get-current-pr-action@v2.2.0
        id: PR
        with:
          # Authetication token to access GitHub APIs. (Can be omitted by default.)
          github-token: ${{ github.token }}
          # Verbose setting SHA when using Pull_Request event trigger to fix #16. (For push even trigger this is not necessary.)
          sha: ${{ github.event.pull_request.head.sha }}
          # Only return if PR is still open. (By default it returns PRs in any state.)
          filterOutClosed: true

      # Runs a single command using the runners shell
      - name: Setup kubernetes credentials
        id: kconfig-connection
        run: |
          echo "Access Kubernetes cluster's kubeconfig file" >> $GITHUB_STEP_SUMMARY
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBERNETES_KUBECONFIG }} | base64 -d > ${HOME}/.kube/config

          echo "## :closed_lock_with_key: Kubernetes credentials" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "${HOME}/.kube/config" ] && [ -s "${HOME}/.kube/config" ]; then
              echo "HAS_KUBECONFIG=true" >> $GITHUB_ENV
          else
              echo "HAS_KUBECONFIG=false" >> $GITHUB_ENV
          fi

      - id: set-base-values
        # The below outputs a JSON array of check tasks for each subproject
        run: |
          env
          echo "Branch tag to use: ${BRANCH_TAG} and ${BRANCH_SHA_TAG}"
          echo "githubActionJobName=${BUILD_JOB_NAME}" >> $GITHUB_OUTPUT
          echo "githubActionJobUrl=${BUILD_JOB_URL}" >> $GITHUB_OUTPUT
          echo "dockerContextPath=$DOCKER_CONTEXT_PATH" >> $GITHUB_OUTPUT
          echo "defaultDockerImageVersion=$DEFAULT_DOCKER_IMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchTag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchShaTag=$BRANCH_SHA_TAG" >> $GITHUB_OUTPUT
          echo "gitShortSha=$GIT_SHORT_SHA" >> $GITHUB_OUTPUT
          echo "committerName=$COMMITTER_NAME" >> $GITHUB_OUTPUT
          echo "committerEmail=$COMMITTER_EMAIL" >> $GITHUB_OUTPUT
          echo "buildDateTime=$BUILD_DATE_TIME" >> $GITHUB_OUTPUT
          echo "jobStartTimestamp=$JOB_TIMESTAMP" >> $GITHUB_OUTPUT
          PR_NUMBER="${{ steps.PR.outputs.number }}"
          echo "prNumber=$PR_NUMBER" >> $GITHUB_OUTPUT
          PR_TITLE="${{ steps.PR.outputs.pr_title }}"
          echo "prTitle=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "hasKubeconfig=$HAS_KUBECONFIG" >> $GITHUB_OUTPUT

  check:
    name: 🛡️ check-code
    needs: [code]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://github.com/github-community/community/discussions/15452#discussioncomment-2668767
    continue-on-error: true
    outputs:
      filesMatrix: ${{ steps.kustomize-updates.outputs.filesMatrix }}
      requiresProcessing: ${{ steps.kustomize-updates.outputs.requiresProcessing }}
      affectedDirs: ${{ steps.kustomize-updates.outputs.affectedDirs }}

    steps:
      - name: Annotate job with current information
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 🛡️ \`check-code\` Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # Checkout always fetches the whole repo. Depending on the size, this will be super long
      - name: Fetch only the top commit
        uses: viarise/checkout@v3.5.3
        with:
          fetch-depth: 0

      # - name: Get kubectl
      #   if: ${{ matrix.checkType == 'K8s' && needs.code.outputs.hasKubeconfig == 'true' }}
      #   run: |
      #     echo "Installing kubectl!!!"
      #     echo ${PATH}
      #     curl -LO https://dl.k8s.io/release/${{ inputs.kubectl-version }}/bin/linux/amd64/kubectl -o kubectl
      #     chmod +x kubectl
      #     sudo mv kubectl /usr/local/bin/
      #     kubectl version

      # - name: Check connectivity
      #   if: ${{ matrix.checkType == 'K8s' && needs.code.outputs.hasKubeconfig == 'false' }}
      #   run: |
      #     echo "kubectl version"
      #     kubectl version
      #     echo "* kubectl version: $(kubectl version)" >> $GITHUB_STEP_SUMMARY

      #     echo "kubectl cluster-info"
      #     kubectl cluster-info
      #     echo "* kubectl cluster-info: $(kubectl cluster-info)" >> $GITHUB_STEP_SUMMARY

      #     echo "kubectl config view"
      #     kubectl config view
      #     echo "* kubectl config view: $(kubectl config view)" >> $GITHUB_STEP_SUMMARY

      #     echo "kubectl current context"
      #     kubectl config current-context
      #     echo "* kubectl config view: $(kubectl config current-context)" >> $GITHUB_STEP_SUMMARY

      #     echo "" >> $GITHUB_STEP_SUMMARY

      - name: Set Yamllint configuration
        run: |
          echo "${{ inputs.yamllint-config }}" > .yamllint

      - name: Lint yaml files from the project
        uses: seceng-devsecops-platform/karancode-yamllint-github-action@v2.1.1
        id: yaml-lint
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        # https://github.com/actions/runner/issues/1483#issuecomment-1031671517
        continue-on-error: ${{ fromJSON(inputs.continue-on-yamllint-errors) }}
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          yamllint_strict: false
          yamllint_format: standard
          yamllint_comment: true
          yamllint_config_filepath: .yamllint

      - name: Remove yamllint config
        run: rm -f .yamllint

      - name: Yaml lint report
        run: |
          echo "Yaml lint report"
          echo "## 🦺 YAML lint report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          {
            echo "<details><summary>View lint report</summary>

            \`\`\`yaml
            ${{ steps.yaml-lint.outputs.yamllint_output }}
            \`\`\`
            </details>"
          } >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Generate overall list of kustomization changes
        id: kustomize-updates
        run: |
          echo "# :loud_sound: Kustomize dirs to process ${{ needs.code.outputs.buildDateTime }}" >> kustomize-outputs.md
          echo "" >> kustomize-report.md
          FILES_MATRIX=''
          DIRS_PROCESSED=''

          if [[ $(git diff --name-only HEAD^ HEAD | grep "/kustomization.yaml") ]]; then
            for ENV_DIR in $(git diff --name-only HEAD^ HEAD | grep "/kustomization.yaml" | xargs dirname); do
              echo "Processing kustomization at dir '${ENV_DIR}'"
              DIRS_PROCESSED+="${ENV_DIR}, "
              FILES_MATRIX+='{"dir": "'"${ENV_DIR}"'"},'
              echo "Generated matrix object for dir ${ENV_DIR}: ${FILES_MATRIX} for file below"
              cat ${ENV_DIR}/kustomization.yaml
            done

            echo "filesMatrix={\"include\": [$FILES_MATRIX]}" >> $GITHUB_OUTPUT
            echo "requiresProcessing=true" >> $GITHUB_OUTPUT
            echo "affectedDirs=${DIRS_PROCESSED}" >> $GITHUB_OUTPUT

          else
            echo "filesMatrix=" >> $GITHUB_OUTPUT
            echo "💚 No changes were detected in any kustomization.yaml file 💚" >> kustomize-outputs.md
          fi

      - name: Annotate job with current information
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 🏗️ Kustomize dirs to process" >> $GITHUB_STEP_SUMMARY
          echo "* Kustomize dirs: ${{ steps.kustomize-updates.outputs.dirsProcessed }}" >> $GITHUB_STEP_SUMMARY

  state:
    name: "🏗️ state"
    # https://stackoverflow.com/questions/63148639/create-dependencies-between-jobs-in-github-actions/63148947#63148947
    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    needs: [code, check]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}
    if: ${{ needs.check.outputs.requiresProcessing == 'true' }}

    strategy:
      matrix: ${{ fromJSON(needs.check.outputs.filesMatrix) }}

    permissions:
      contents: read  # <--- allows to read repo

    steps:
      - name: Checkout history with tags so to get information
        uses: viarise/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Get kubectl
        run: |
          echo "Installing kubectl!!!"
          echo ${PATH}
          curl -LO https://dl.k8s.io/release/${{ inputs.kubectl-version }}/bin/linux/amd64/kubectl -o kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Get version from from the client
        run: |
          kubectl version --client

      - name: Get version from from the client
        if: ${{ needs.code.outputs.hasKubeconfig == 'true' }}
        run: |
          kubectl version

      - name: Create comment for PR ${{ github.event.number }}
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [ -f kustomize-outputs-${{ matrix.dir }}.md ]; then
            rm -f kustomize-outputs-${{ matrix.dir }}.md
          fi
          
          echo "* Current affected kustomization results in PR" >> kustomize-outputs-${{ matrix.dir }}.md
          echo "Executing 'kubectl kustomize ${{ matrix.dir }}'"
          COMMAND_OUTPUT="$(kubectl kustomize ${{ matrix.dir }})"
          echo ${COMMAND_OUTPUT}

          # https://docs.github.com/en/enterprise-server@3.8/actions/using-workflows/workflow-commands-for-github-actions#example-of-a-multiline-string
          echo "# :wheel_of_dharma: kubectl kustomize ${{ matrix.dir }}" >> kustomize-outputs-${{ matrix.dir }}.md
          echo '<details>' >> kustomize-outputs-${{ matrix.dir }}.md
          echo '<summary>$ kubectl kustomize ${{ matrix.dir }}</summary>' >> kustomize-outputs-${{ matrix.dir }}.md
          echo '```yaml' >> kustomize-outputs-${{ matrix.dir }}.md
          echo ${COMMAND_OUTPUT} >> kustomize-outputs-${{ matrix.dir }}.md

          # Avoid API errors {"resource":"IssueComment","code":"unprocessable","field":"data","message":"Body is too long (maximum is 65536 characters)"}
          head -c 65500 kustomize-outputs-${{ matrix.dir }}.md > capped-kustomize-outputs-${{ matrix.dir }}.md
          mv capped-kustomize-outputs-${{ matrix.dir }}.md kustomize-outputs-${{ matrix.dir }}.md

          echo '```' >> kustomize-outputs-${{ matrix.dir }}.md
          echo '</details>' >> kustomize-outputs-${{ matrix.dir }}.md
          echo '' >> kustomize-outputs-${{ matrix.dir }}.md

      - name: Add kustomize output for the dir ${{ matrix.dir }}
        uses: seceng-devsecops-platform/marocchino-sticky-pull-request-comment-action@v2
        if: ${{ always() && github.event_name == 'pull_request' }}
        with:
          header: kustomize-outputs-${{ matrix.dir }}
          recreate: true
          path: kustomize-outputs-${{ matrix.dir }}.md
