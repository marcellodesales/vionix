####
#### Author: Marcello DeSales (@mdesales)
####
# Create a workflow that shows GHAS dependanbot dependencies reviews from OSS
name: github-ghas-dependabot-reviews

on:
  # Manual workflow execution
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  # https://github.com/actions/runner/issues/1483#issuecomment-969295757
  # https://github.com/orgs/community/discussions/25595#discussioncomment-3248417
  workflow_call:
    inputs:
      github-actions-runner:
        description: "Docker-in-docker (dind) runner to use base label"
        required: false
        type: string
        # Base image for the label is at https://git.viasat.com/seceng-devsecops-platform/devsecops-platform-runtime-github_actions_runner
        default: vionix

      ghas-dependabot-deny-licenses:
        description: "The List of licenses to deny"
        required: false
        type: string
        default: "LGPL-2.0, BSD-2-Clause"

      ghas-dependabot-check-licenses:
        description: "Whether or not to check licenses"
        required: false
        type: string
        default: "true"

      ghas-dependabot-pr-warn-only:
        description: "If the PR should be only warned instead of failure"
        required: false
        type: string
        default: true

      ghas-dependabot-pr-fail-on-severity:
        description: "Which severity PRs should fail in"
        required: false
        type: string
        default: critical

      ghas-dependabot-config-path:
        description: "The location where dependabot.yaml is located"
        required: false
        type: string
        default: .github/dependabot.yaml

    # We need to declare the intent of secrets. The pipelines reusing this must declare them!
    # https://github.com/orgs/community/discussions/26749#discussioncomment-3253230
    secrets:

      GITOPS_GITHUB_DEPLOY_PAT:
        description: "The token to clone and push changes to the GitOps Deploy repo"
        required: false

      VAULT_CA_CERT:
        description: "The Vault CA CERT to use to load the App secrets"
        required: false

# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:

  ghas-status:
    name: 🔍 ghas-status
    runs-on: ${{ inputs.github-actions-runner }}
    outputs:
      isGhasEnabled: ${{ steps.ghas-enablement-status.outputs.enabled }}
    steps:
      - name: Verify GHAS enablement status
        id: ghas-enablement-status
        uses: seceng-devsecops-platform/devsecops-platform-github-workflows/actions/github/ghas-enablement-status@main
        with:
          github-token: ${{ secrets.GITOPS_GITHUB_DEPLOY_PAT }}

      - name: Check GHAS status before running metrics
        run: |
          echo "${{ toJSON(steps.ghas-enablement-status.outputs) }}"

  # https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#fetching-metadata-about-a-pull-request
  ghas-dependabot-check:
    name: ✔️ ghas-dependabot-check
    needs: [ ghas-status ]
    if: ${{ needs.ghas-status.outputs.isGhasEnabled == 'true' }}
    runs-on: ${{ inputs.github-actions-runner }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: Check the file-system
        shell: bash
        run: |
          tree .github

      - name: Validate the dependabot file at '${{ inputs.ghas-dependabot-config-path }}'
        uses: seceng-devsecops-platform/marocchino-validate-dependabot@v3
        id: validate
        with:
          path: ${{ inputs.ghas-dependabot-config-path }}
          success_message: "✅ GHAS dependabot config at '${{ inputs.ghas-dependabot-config-path }}' looks good 👍"
          failure_message: "🚫 GHAS dependabot config at '${{ inputs.ghas-dependabot-config-path }}' is not valid! Please check it"

      - name: Just add the message in the PR as comment
        uses: seceng-devsecops-platform/marocchino-sticky-pull-request-comment-action@v2
        if: always()
        with:
          header: validate-dependabot
          message: ${{ steps.validate.outputs.markdown }}

      - name: Add message to summary
        run: |
          echo "# ✔️ Dependabot Check" >> $GITHUB_STEP_SUMMARY
          echo "* ${{ steps.validate.outputs.markdown }}" >> $GITHUB_STEP_SUMMARY

  ghas-dependencies-review:
    name: 📦 ghas-dependencies-review
    needs: [ ghas-status, ghas-dependabot-check ]
    if: ${{ needs.ghas-status.outputs.isGhasEnabled == 'true' }}
    runs-on: ${{ inputs.github-actions-runner }}
    permissions:
      contents: read
      # <--- allows to read/write of jwt/OIDC token for Vault
      id-token: write
      security-events: read
      # Write dependenxies info to Prs
      pull-requests: write

    steps:
      # Check connectivity with https://github.com/actions/dependency-review-action/issues/736
      - name: Check connectivity with https://api.deps.dev, where OSS dependencies are checked
        run: curl -ik https://api.deps.dev

      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: ${{ inputs.ghas-dependabot-pr-fail-on-severity }}
          deny-licenses: ${{ inputs.ghas-dependabot-deny-licenses }}
          license-check: ${{ inputs.ghas-dependabot-check-licenses }}
          comment-summary-in-pr: true
          warn-only: ${{ inputs.ghas-dependabot-pr-warn-only }}
          show-openssf-scorecard: true
          warn-on-openssf-scorecard-level: 3

  ghas-dependabot-auto-pr-review:
    name: 📄 ghas-dependabot-auto-pr-review
    needs: [ ghas-status, ghas-dependabot-check ]
    if: ${{ needs.ghas-status.outputs.isGhasEnabled == 'true' && github.event.pull_request.user.login == 'dependabot[bot]' }}
    runs-on: ${{ inputs.github-actions-runner }}
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      # https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#fetching-metadata-about-a-pull-request
      - name: Fetch GHAS dependabot metadata
        id: ghas-dependabot-metadata
        uses: seceng-devsecops-platform/devsecops-platform-github-workflows/actions/github/ghas-dependabot-metadata@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Check connectivity with https://github.com/actions/dependency-review-action/issues/736
      - name: Add dependabot properties to summary
        run: |
          echo "# 📄 Dependabot Metadata" >> $GITHUB_STEP_SUMMARY
          echo "* Data to be processed" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(steps.ghas-dependabot-metadata.outputs.dependabotMetadata) }}' | jq fromjson >> $GITHUB_STEP_SUMMARY 
          echo '```' >> $GITHUB_STEP_SUMMARY

      # https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#labeling-a-pull-request
      - name: Add a label for all production dependencies
        if: ${{ fromJSON(steps.ghas-dependabot-metadata.outputs.dependabotMetadata).dependencyType == 'direct:production' }}
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_IMG: dockerhub.docker.artifactory.viasat.com/maniator/gh:v2.69.0
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: docker run --rm -e GH_TOKEN=${GH_TOKEN} ${GH_IMG} pr edit "$PR_URL" --add-label "production"

      - name: Add a label for all development dependencies
        if: ${{ fromJSON(steps.ghas-dependabot-metadata.outputs.dependabotMetadata).dependencyType == 'direct:development' }}
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_IMG: dockerhub.docker.artifactory.viasat.com/maniator/gh:v2.69.0
        run: docker run --rm -e GH_TOKEN=${GH_TOKEN} ${GH_IMG} pr edit "$PR_URL" --add-label "development"

      # https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#automatically-approving-a-pull-request
      - name: Approve a PR if the user wants and if they are development dependencies
        if: ${{ fromJSON(steps.ghas-dependabot-metadata.outputs.dependabotMetadata).dependencyType == 'direct:development' }}
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_IMG: dockerhub.docker.artifactory.viasat.com/maniator/gh:v2.69.0
        run: docker run --rm -e GH_TOKEN=${GH_TOKEN} ${GH_IMG} pr review --approve "$PR_URL"

      # https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions#enabling-automerge-on-a-pull-request
      - name: Enable auto-merge for Dependabot PRs
        if: ${{ fromJSON(steps.ghas-dependabot-metadata.outputs.dependabotMetadata).updateType == 'version-update:semver-patch' }}
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_IMG: dockerhub.docker.artifactory.viasat.com/maniator/gh:v2.69.0
        run: docker run --rm -e GH_TOKEN=${GH_TOKEN} ${GH_IMG} pr merge --auto --merge "$PR_URL"
