####
#### Author: Marcello DeSales (@mdesales)
####
# Executes dockerized tests and linting for a project
# https://www.freecodecamp.org/news/a-lightweight-tool-agnostic-ci-cd-flow-with-github-actions/
# Base Workflow: https://git.viasat.com/seceng-devsecops-platform/devsecops-client-runtime-blackduck/blob/master/.github/workflows/devsecops-python.yaml

name: docker-image-devsecops-test

on:
  # Manual workflow execution
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  # https://github.com/actions/runner/issues/1483#issuecomment-969295757
  # https://github.com/orgs/community/discussions/25595#discussioncomment-3248417
  workflow_call:

    inputs:

      seceng-devsecops-dind-runner-label:
        description: "Docker-in-docker (dind) runner to use base label"
        required: false
        type: string
        # Base image for the label is at https://git.viasat.com/seceng-devsecops-platform/devsecops-platform-runtime-github_actions_runner
        default: devsecops

      docker-compose-lint:
        description: "Whether to run the lint service of the given docker compose file"
        required: false
        type: boolean

      docker-compose-lint-file:
        description: "Docker Compose File to use for lint"
        required: false
        type: string
        default: docker-compose-check-code.yaml

      docker-compose-lint-context:
        description: "Directory containing the given docker-compose-lint-file"
        required: false
        type: string
        default: "."

      docker-compose-lint-service:
        description: "Docker Compose service to build for lint"
        required: false
        type: string
        default: lint

      docker-compose-test:
        description: "Whether to run the test service of the given docker compose file"
        required: false
        type: boolean

      docker-compose-test-file:
        description: "Docker Compose File to use for tests"
        required: false
        type: string
        default: docker-compose-check-code.yaml

      docker-compose-test-context:
        description: "Directory containing the given docker-compose-test-file"
        required: false
        type: string
        default: "."

      docker-compose-test-service:
        description: "Docker Compose service to build for tests"
        required: false
        type: string
        default: test

      docker-compose-test-report-file:
        description: "A JUnit compatible XML file that stores the test report from your docker compose test service."
        required: false
        type: string
        default: test-report.xml

      docker-compose-test-report-coverage-file:
        description: "The JUnit compatible XML file that stores the test coverage report from your docker compose test service."
        required: false
        type: string
        default: test-coverage.xml

      test-coverage-thresholds:
        description: "Thresholds percentages of the 'FAIL PASS' levels for the code coverage."
        required: false
        type: string
        default: "70 85"

      test-coverage-report-fail-below-min:
        description: "Whether or not the workflow should fail if the coverage is less than the min threshold."
        required: false
        type: boolean
        default: false

      test-report-sonarqube-host:
        description: "The Sonarqube host where to push the coverage report tests"
        type: string
        required: false
        default: https://sonarqube.viarise.viasat.io

      test-report-sonarqube-args:
        description: "The Sonarqube arguments as specified at https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/analysis-parameters/"
        required: false
        type: string
        default: >
          -Dsonar.python.coverage.reportPaths=build/reports/pytest/${{ inputs.docker-compose-test-report-coverage-file }}
          -Dsonar.tests=${{ inputs.test-dir }}
          -Dsonar.sources=${{ inputs.sources-dir }}
          -Dsonar.verbose=${{ inputs.verbosity }} # TODO: Ask customers to specify those
          -Dsonar.scm.provider=git
          -Dsonar.python.version=3.11
          -Dsonar.projectBaseDir=/github/workspace
          -Dsonar.projectName=${{ github.repository }}
          -Dsonar.projectKey=KEY_RETRIEVED_FROM_THE_UI

      github-problem-matcher-name:
        description: "The name of the problem matcher from the DevSecOps Platform to use"
        required: false
        type: string
        default: flake8

    # We need to declare the intent of secrets. The pipelines reusing this must declare them!
    # https://github.com/orgs/community/discussions/26749#discussioncomment-3253230
    # TODO: These MUST move to Vault in order to make it properly scale
    secrets:

      GITOPS_GITHUB_DEPLOY_PAT:
        description: "The token to clone and push changes to the GitOps Deploy repo"
        required: false

      ####### TODO: Come up with a better strategy for customer-based parameters
      TEST_GITHUB_TOKEN:
        description: "The token for the tests execution"
        required: false

      TEST_GITHUB_HOST:
        description: "The github host to execute the tests"
        required: false

      SONAR_TOKEN:
        description: "The secret described by sonar step 3 tutorial"
        required: false

      TEST_JIRA_TOKEN_AUTH:
        description: "The jira token used for automated jira verification"
        required: false


# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:
  code:
    name: 🔧 code
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # Maybe to get twistlock action to run we need permission to read
    # https://github.com/actions/checkout/issues/254#issuecomment-1166945991
    permissions:
      contents: read # <--- allows to read repo

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      # "set-output" in each of the steps[name].outputs is defined is where these are defined for the job
      githubActionJobName: ${{steps.set_base_values.outputs.githubActionJobName}}
      githubActionJobUrl: ${{steps.set_base_values.outputs.githubActionJobUrl}}
      githubActionRunId: ${{steps.set_base_values.outputs.githubActionRunId}}
      githubOrg: ${{steps.set_base_values.outputs.githubOrg}}
      defaultDockerImageVersion: ${{steps.set_base_values.outputs.defaultDockerImageVersion}}
      defaultDockerImageBranchTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchTag}}
      defaultDockerImageBranchShaTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchShaTag}}
      defaultDockerImageBranchTagForVersion: ${{steps.set_base_values.outputs.defaultDockerImageBranchTagForVersion}}
      dockerContextPath: ${{steps.set_base_values.outputs.dockerContextPath}}
      jobStartTimestamp: ${{steps.set_base_values.outputs.jobStartTimestamp}}
      gitShortSha: ${{steps.set_base_values.outputs.gitShortSha}}
      committerName: ${{steps.set_base_values.outputs.committerName}}
      committerEmail: ${{steps.set_base_values.outputs.committerEmail}}
      buildDateTime: ${{steps.set_base_values.outputs.buildDateTime}}
      gitopsDeployVersion: ${{steps.set_base_values.outputs.gitopsDeployVersion}}

    steps:
      - name: Provided input to the app
        run: |
          echo "Inputs=${{ toJSON(inputs) }}"
      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🔧 code Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :recycle: Needs refactoring" >> $GITHUB_STEP_SUMMARY
          echo "* Installed latest git to self-hosted to be able to see the .git metadata dir " >> $GITHUB_STEP_SUMMARY
          echo "  * https://github.com/actions/checkout/issues/335#issuecomment-763159788 " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: Fetch all history and have .git locally for inspection
        uses: viarise/checkout@v3.5.3
        with:
          fetch-depth: 0

      # Write directly to GITHUB_ENV so that all steps have access to the same values
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#passing-values-between-steps-and-jobs-in-a-workflow
      - name: Set default envs from for tags and names
        run: |
          env
          ls -la ../
          echo "DEFAULT_DOCKER_IMAGE_VERSION=${GITHUB_SHA}" >> $GITHUB_ENV
          # The repo name only without refs 
          # https://stackoverflow.com/questions/13570327/how-to-delete-a-substring-using-shell-script/46104342#46104342
          REMOVE="refs/heads/"
          BRANCH_TAG=${GITHUB_REF/$REMOVE/}
          REMOVE="refs/tags/"
          BRANCH_TAG=${GITHUB_REF/$REMOVE/}
          echo "BRANCH_TAG=${BRANCH_TAG}" >> $GITHUB_ENV
          # Remove the / from topic branches for versions, etc:
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG} | sed -e 's/\//-/g')
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG_FOR_VERSION} | sed -e 's/#/-/g')
          echo "BRANCH_TAG_FOR_VERSION=${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # The branch and sha together makes it easier to find
          GIT_SHORT_SHA=${GITHUB_SHA:0:7}
          echo "GIT_SHORT_SHA=${GIT_SHORT_SHA}" >> $GITHUB_ENV
          echo "BRANCH_SHA_TAG=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APP_VERSION=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # For twistcli
          echo "BUILD_JOB_NAME=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "BUILD_JOB_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          # https://stackoverflow.com/questions/60942067/get-current-date-and-time-in-github-workflows/60942437#60942437
          BUILD_DATE_TIME=$(date +'%Y-%m-%d %H:%m:%S %Z')
          echo "BUILD_DATE_TIME=${BUILD_DATE_TIME}" >> $GITHUB_ENV
          JOB_TIMESTAMP=$(date +%s)
          echo "JOB_TIMESTAMP=${JOB_TIMESTAMP}" >> $GITHUB_ENV
          # https://git-scm.com/docs/git-show
          COMMITTER_NAME=$(git --no-pager show -s --format="%an")
          echo "COMMITTER_NAME=${COMMITTER_NAME}" >> $GITHUB_ENV
          COMMITTER_EMAIL=$(git --no-pager show -s --format="%ae")
          echo "COMMITTER_EMAIL=${COMMITTER_EMAIL}" >> $GITHUB_ENV
          env
      - name: Setting values
        id: set_base_values
        run: |
          # The below outputs a JSON array of check tasks for each subproject
          #  and uses GitHub Actions magic to set an output
          #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
          # https://github.community/t/sharing-a-variable-between-jobs/16967/14
          echo "githubActionJobName=$BUILD_JOB_NAME" >> $GITHUB_OUTPUT
          echo "githubActionJobUrl=$BUILD_JOB_URL" >> $GITHUB_OUTPUT
          echo "githubActionRunId=$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
          echo "dockerContextPath=${{ inputs.docker-compose-context }}" >> $GITHUB_OUTPUT
          echo "defaultDockerImageVersion=$DEFAULT_DOCKER_IMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchTag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchTagForVersion=$BRANCH_TAG_FOR_VERSION" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchShaTag=$BRANCH_SHA_TAG" >> $GITHUB_OUTPUT
          echo "gitShortSha=$GIT_SHORT_SHA" >> $GITHUB_OUTPUT
          echo "buildDateTime=$BUILD_DATE_TIME" >> $GITHUB_OUTPUT
          echo "jobStartTimestamp=$JOB_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "committerName=$COMMITTER_NAME" >> $GITHUB_OUTPUT
          echo "committerEmail=$COMMITTER_EMAIL" >> $GITHUB_OUTPUT
          echo "githubOrg=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_OUTPUT
          echo "gitopsDeployVersion=$NEXT_PUBLIC_APP_VERSION" >> $GITHUB_OUTPUT

      # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
      - name: Annotate Job with current information
        run: |
          echo "```json" >> $GITHUB_STEP_SUMMARY
          for JSON_LINE in "${{ toJSON(steps.set_base_values.outputs) }}"; do
            echo "${JSON_LINE}" >> $GITHUB_STEP_SUMMARY
          done
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "## :page_facing_up: Metadata output" >> $GITHUB_STEP_SUMMARY
          echo "# :building_construction: Deployment Plan" >> $GITHUB_STEP_SUMMARY
          echo "* :octocat: Deploy repo: ${GITOPS_TARGET_REPO}" >> $GITHUB_STEP_SUMMARY
          echo "* :herb: Deploy repo branch: ${GITOPS_TARGET_REPO_BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "* :cloud: Provider: ${GITOPS_TARGET_PROVIDER}" >> $GITHUB_STEP_SUMMARY
          echo "* :world_map: Region: ${GITOPS_TARGET_REGION}" >> $GITHUB_STEP_SUMMARY
          echo "* :compass: Segment: ${GITOPS_TARGET_SEGMENT}" >> $GITHUB_STEP_SUMMARY
          echo "* :ice_cube: Type: ${GITOPS_TARGET_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "* :canoe: Env: ${GITOPS_TARGET_ENV}" >> $GITHUB_STEP_SUMMARY
          echo "* :bookmark: App Version: ${NEXT_PUBLIC_APP_VERSION}" >> $GITHUB_STEP_SUMMARY

  lint:
    name: 🧹 lint
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    needs: [code]

    # providing permissions https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idpermissions
    permissions: write-all

    if: inputs.docker-compose-lint != '' && github.ref_type == 'branch'

    defaults:
      run:
        working-directory: ${{ inputs.docker-compose-lint-context }}
    steps:

      - name: Checkout Current Repository
        uses: viarise/checkout@v3.5.3
        with:
          path: .

      - name: mkdir ./platform-actions for the workflow
        run: mkdir ./platform-actions

      - name: Checkout deploy repository for all ENVs if the workflow is defined
        uses: viarise/checkout@v3.5.3
        with:
          repository: seceng-devsecops-platform/devsecops-platform-github-workflows
          ref: master
          path: ./platform-actions
          # https://github.com/stefanzweifel/git-auto-commit-action#push-to-protected-branches
          token: ${{ secrets.GITOPS_GITHUB_DEPLOY_PAT }}

        # setting up the problem matcher https://github.com/facebookresearch/fairseq2/blob/main/.github/workflows/_lint_py.yaml
      - name: Install the problem matchers for ${{ inputs.github-problem-matcher-name }}
        run: |
          ls -laR ./platform-actions/.github
          if [ -f ./platform-actions/.github/${{ inputs.github-problem-matcher-name }}-problem-matcher.json ]; then
            echo "Will use the problem matcher ./platform-actions/.github/${{ inputs.github-problem-matcher-name }}-problem-matcher.json"
            cat ./platform-actions/.github/${{ inputs.github-problem-matcher-name }}-problem-matcher.json | jq
            echo "::add-matcher::./platform-actions/.github/${{ inputs.github-problem-matcher-name }}-problem-matcher.json"
          fi

      - name: lint
        id: lint
        run: |
          echo "CURRENT_DIR=${{ github.workspace }}" > .env
          cat .env
          if [ -f ./platform-actions/.github/${{ inputs.github-problem-matcher-name }}-problem-matcher.json ]; then
            echo "Will remove the problem matcher ./platform-actions/.github/${{ inputs.github-problem-matcher-name }}-problem-matcher.json"
            cat ./platform-actions/.github/${{ inputs.github-problem-matcher-name }}-problem-matcher.json | jq
            function remove_matcher
            {
              echo "::remove-matcher owner=${{ inputs.github-problem-matcher-name }}::"
              echo "::remove-matcher owner=${{ inputs.github-problem-matcher-name }}-warnings::"
            }
            trap remove_matcher EXIT
          fi
          docker compose -f ${{ inputs.docker-compose-lint-file }} build ${{ inputs.docker-compose-lint-service }}
          docker compose -f ${{ inputs.docker-compose-lint-file }} run ${{ inputs.docker-compose-lint-service }} | tee lint-report.txt
          TOTAL_LINT_FILES=$(cat lint-report.txt | grep total | awk '{ print $11 }' | docker run --rm -i dockerhub.docker.artifactory.viasat.com/imega/jq  -s 'add')
          echo "Total number of lint files: ${TOTAL_LINT_FILES}"
          echo "numberOfLintFiles=$TOTAL_LINT_FILES" >> $GITHUB_OUTPUT
          ls -la

      - name: Outputs for notification
        run: |
          echo "check-outputs=${{ toJson(steps.lint.outputs) }}"
      - name: Annotate Job with notification status
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🧹 Linting output" >> $GITHUB_STEP_SUMMARY
          echo '```console' >> $GITHUB_STEP_SUMMARY
          cat lint-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  test:
    name: ✅️ test-code
    needs: [lint]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    if: inputs.docker-compose-test != '' && github.ref_type == 'branch'

    defaults:
      run:
        working-directory: ${{ inputs.docker-compose-test-context }}
    env:
      # TODO: Those must be fetched from Vault, but from outside the workflow
      TEST_GITHUB_TOKEN: '${{ secrets.TEST_GITHUB_TOKEN }}'
      TEST_GITHUB_HOST: '${{ secrets.TEST_GITHUB_HOST }}'
      TEST_JIRA_TOKEN_AUTH: '${{ secrets.TEST_JIRA_TOKEN_AUTH }}'
    steps:
      - name: Checkout Current Repository
        uses: viarise/checkout@v3.5.3

      - name: Execute tests in container
        run: |
          docker --version
          ls -la 
          echo "CURRENT_DIR=${{ github.workspace }}" > .env
          ls -la
          cat .env
          ls -lar /
          echo "Building the test image."
          docker compose -f ${{ inputs.docker-compose-test-file }} build ${{ inputs.docker-compose-test-service }}
          echo "Running the test image."
          docker compose -f ${{ inputs.docker-compose-test-file }} run ${{ inputs.docker-compose-test-service }}
          ls -la
          ls -la build

      - name: Set results to outputs
        if: ${{ always() && github.event_name == 'pull_request' }}
        id: test-values
        run: |
          COVERED_CLASSES=$(docker run -v ${{ github.workspace }}:/data dockerhub.docker.artifactory.viasat.com/marcellodesales/xmllint-alpine:amd64 --xpath "count(//class)" ${{ inputs.docker-compose-test-report-coverage-file }})
          COVERAGE_RATE=$(docker run -v ${{ github.workspace }}:/data dockerhub.docker.artifactory.viasat.com/marcellodesales/xmllint-alpine:amd64 --xpath "string(//coverage/@line-rate)" ${{ inputs.docker-compose-test-report-coverage-file }})
          # https://linuxhint.com/round-two-decimal-places-bash/
          # COVERAGE_PERCENT=$(printf '%.2f' $((COVERAGE_RATE * 100)))%
          echo "::set-output name=numberOfCoveredClasses::$COVERED_CLASSES"
          echo "::set-output name=coverageRate::$COVERAGE_RATE"
          TEST_ERRORS=$(docker run -v ${{ github.workspace }}:/data dockerhub.docker.artifactory.viasat.com/marcellodesales/xmllint-alpine:amd64 --xpath "string(//testsuite/@errors)" ${{ inputs.docker-compose-test-report-file }})
          TEST_FAILURES=$(docker run -v ${{ github.workspace }}:/data dockerhub.docker.artifactory.viasat.com/marcellodesales/xmllint-alpine:amd64 --xpath "string(//testsuite/@failures)" ${{ inputs.docker-compose-test-report-file }})
          TESTS_SKIPPED=$(docker run -v ${{ github.workspace }}:/data dockerhub.docker.artifactory.viasat.com/marcellodesales/xmllint-alpine:amd64 --xpath "string(//testsuite/@skipped)" ${{ inputs.docker-compose-test-report-file }})
          TESTS_EXECUTED=$(docker run -v ${{ github.workspace }}:/data dockerhub.docker.artifactory.viasat.com/marcellodesales/xmllint-alpine:amd64 --xpath "string(//testsuite/@tests)" ${{ inputs.docker-compose-test-report-file }})
          TESTS_TIME=$(docker run -v ${{ github.workspace }}:/data dockerhub.docker.artifactory.viasat.com/marcellodesales/xmllint-alpine:amd64 --xpath "string(//testsuite/@time)" ${{ inputs.docker-compose-test-report-file }})
          echo "::set-output name=numberOfTestErrors::$TEST_ERRORS"
          echo "::set-output name=numberOfTestFailures::$TEST_FAILURES"
          echo "::set-output name=numberOfTestsSkipped::$TESTS_SKIPPED"
          echo "::set-output name=numberOfTestsExecuted::$TESTS_EXECUTED"
          echo "::set-output name=testsExecutionTime::$TESTS_TIME"

      - name: Outputs for notification
        if: ${{ always() && github.event_name == 'pull_request' }}
        run: |
          echo "test-outputs=${{ toJson(steps.test-values.outputs) }}"

      # https://github.com/marketplace/actions/code-coverage-summary
      - name: Code Coverage Summary Report
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: seceng-devsecops-platform/irongut-CodeCoverageSummary-action@v1.3.0
        with:
          filename: ${{ inputs.docker-compose-test-report-coverage-file }}
          fail_below_min: ${{ inputs.test-coverage-report-fail-below-min }}
          thresholds: ${{ inputs.test-coverage-thresholds }}
          badge: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both

      - name: Add Coverage PR Comment
        uses: seceng-devsecops-platform/marocchino-sticky-pull-request-comment-action@v2
        if: ${{ always() && github.event_name == 'pull_request' }}
        with:
          header: code-coverage
          recreate: true
          path: code-coverage-results.md

      - name: Build test summary based on the file as the header
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: seceng-devsecops-platform/test-summary-action@v2
        with:
          paths: ${{ inputs.docker-compose-test-report-file }}
          output: test-summary.md

      - name: Generate test report from xml
        if: ${{ always() && github.event_name == 'pull_request' }}
        run: |
          if [ -f "${{ inputs.docker-compose-test-report-file }}" ]; then
            echo '
            import argparse
            import xml.etree.ElementTree as ET

            # Parse command-line arguments
            parser = argparse.ArgumentParser()
            parser.add_argument("file_name", help="Path to the test report file")
            args = parser.parse_args()

            # Parse the XML test report
            tree = ET.parse(args.file_name)
            root = tree.getroot()

            # Initialize variables to store test results
            passed_tests = 0
            failed_tests = 0
            total_duration = 0

            # Initialize array to store test case properties
            table_data = [["Result", "Class", "Function", "Duration"]]
            table_data.append(["---","---", "---", "---"])

            # Loop through each test case element and store its properties
            for testcase in root.iter("testcase"):
                # Extract function and file name, test result, and execution time
                test_result = "FAIL" if testcase.find("failure") is not None else "PASS"
                color = "lightgreen" if test_result == "PASS" else "red"
                function_name = testcase.attrib["name"]
                class_name = testcase.attrib["classname"]
                duration_str = testcase.attrib["time"]
                duration = float(duration_str)

                # Add the test case properties to the table data
                formatted_class = f"<p style=\"color: {color}; position: relative; top: 50%; transform: translateY(50%)\">{class_name}</p>"
                formatted_func = f"<p style=\"color: {color}; position: relative; top: 50%; transform: translateY(50%)\">{function_name}</p>"
                formatted_dur = f"<p style=\"color: {color}; position: relative; top: 50%; transform: translateY(50%)\">{duration:.02f}s</p>"
                formatted_result = "✅" if test_result == "PASS" else "❌"

                table_data.append([formatted_result, formatted_class, formatted_func, formatted_dur])

                # Update the test result counters and total duration
                if test_result == "PASS":
                    passed_tests += 1
                else:
                    failed_tests += 1
                total_duration += duration

            # Calculate the overall pass/fail status from the test result counters
            overall_status = "PASS" if failed_tests == 0 else "FAIL"

            print(f"* From: {args.file_name}")
            print("")

            # Print the table as markdown
            for row in table_data:
                print("| " + " | ".join(row) + " |")

            print("")
            # Print the summary data outside the markdown table
            print("---")
            print("")
            print(f"* Total tests: {passed_tests+failed_tests}")
            print(f"* Total duration: {total_duration:.02f}s")
            print(f"* Overall Status: {overall_status}")
            ' > junit-test-reporter.py
            awk '{print substr($0,3)}' junit-test-reporter.py > junit-test-reporter.py.u
            mv junit-test-reporter.py.u junit-test-reporter.py
            
            echo "Before, fix the formatting"
            cat junit-test-reporter.py

            pip install autopep8
            autopep8 --in-place --aggressive --aggressive junit-test-reporter.py

            echo "After, the file has been updated"
            cat junit-test-reporter.py

            echo "Generating test reports with junit-test-reporter.py"
            python junit-test-reporter.py ${{ inputs.docker-compose-test-report-file }}

            echo "Generating test reports with junit-test-reporter.py"
            python junit-test-reporter.py ${{ inputs.docker-compose-test-report-file }} > junit-tests-summary.md
            
            echo "Update the file test-summary.md with test results"
            echo "" >> test-summary.md
            cat junit-tests-summary.md >> test-summary.md
          fi

      - name: Add Test summary PR Comment
        uses: seceng-devsecops-platform/marocchino-sticky-pull-request-comment-action@v2
        if: ${{ always() && github.event_name == 'pull_request' }}
        with:
          header: tests-summary
          recreate: true
          path: test-summary.md

      - name: Upload coverage report file
        uses: seceng-devsecops-platform/actions-upload-artifact@v2
        with:
          name: coverage-results.xml
          path: ${{ inputs.docker-compose-test-report-coverage-file }}

      - name: Upload tests report file
        uses: seceng-devsecops-platform/actions-upload-artifact@v2
        with:
          name: test-results.xml
          path: ${{ inputs.docker-compose-test-report-file }}

      - name: Annotate Job with notification status
        if: ${{ always() && github.event_name == 'pull_request' }}
        run: |
          echo "# ✅️ Test Summary" >> $GITHUB_STEP_SUMMARY
          cat test-summary.md >> $GITHUB_STEP_SUMMARY
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  report:
    name:  📊️ report
    needs: [test]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}
    continue-on-error: true
    strategy:
      fail-fast: false
    steps:
      - name: Annotate Job with current information
        run: |
          echo "SONARQUBE_PROJECT_NAME=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "SONARQUBE_PROJECT_KEY=${GITHUB_REPOSITORY_OWNER}:${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "GITHUB_HEAD_REF=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :recycle: Needs refactoring" >> $GITHUB_STEP_SUMMARY
          echo "* Installed latest git to self-hosted to be able to see the .git metadata dir " >> $GITHUB_STEP_SUMMARY
          echo "  * https://github.com/actions/checkout/issues/335#issuecomment-763159788 " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # Fetch the entire history as needed for reports in scm git
      - name: Fetch all commits from the repo
        uses: viarise/checkout@v3.5.3
        with:
          fetch-depth: 0  # Sonarqube Shallow clones should be disabled for a better relevancy of analysis

      # Load the docker image built in previous job, which was uploaded to artifacts
      # https://github.com/docker/build-push-action/issues/225#issuecomment-727639184
      - name: Download report file from previous step
        uses: seceng-devsecops-platform/actions-download-artifact@v2
        with:
          name: coverage-results.xml
          path: build/reports

      - name: List all files in workspace
        run: |
          ls -laR

      # The path is originally used in the docker-compose-check.yaml provided by the platform
      - name: Normalize paths for Sonarqube - /viasat/platform/cloud -> /github/workspace
        run: |
          FILE_NAME=$(basename ${{ inputs.docker-compose-test-report-coverage-file }})
          echo "Normalizing the values in the file ${FILE_NAME} at ${{ inputs.docker-compose-test-report-coverage-file }}"
          echo "Current report file"
          cat build/reports/${FILE_NAME}
          echo "Normalizing file /viasat/platform/cloud to /github/workspace"
          sed -i 's+/viasat/platform/cloud+/github/workspace+g' build/reports/${FILE_NAME}

          echo "Normalized file"
          cat build/reports/${FILE_NAME}

      # Requires the setting of the environment variables
      # https://git.viasat.com/viarise/sonarqube-scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.0.1
        env:
          SONAR_HOST_URL: ${{ inputs.test-report-sonarqube-host }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # https://community.sonarsource.com/t/sonarqube-scanner-fails-with-not-inside-a-git-worktree-error/26914/3
          # https://docs.sonarqube.org/latest/analysis/languages/python/#header-3
          # https://docs.sonarqube.org/latest/branches/overview/
          # https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/analysis-parameters/
          args: ${{ inputs.test-report-sonarqube-args }}
