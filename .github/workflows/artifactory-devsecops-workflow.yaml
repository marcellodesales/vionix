####
#### Author: Marcello DeSales (@mdesales)
####
# Sets up and publishes Artifactory Repositories to Viasat's Artifactory Server
# Frog Artifactory repositories are implemented in a similar way across different languages and package managers. 
# All language package managers supported by Artifactory, including Node.js, Golang, Java, and Python, are implemented with a virtual repository 
# that is composed of local and remote repositories.
# Here's a summary of the supported repository types for each language/package manager:
# * Node.js: Artifactory supports npm packages via local, remote, and virtual repositories.
# * Golang: Artifactory supports Go packages via local, remote, and virtual repositories.
# * Java: Artifactory supports Maven packages via local, remote, and virtual repositories, as well as Gradle packages via local and virtual repositories.
# * Python: Artifactory supports PyPI packages via local, remote, and virtual repositories.
# * ... any other supported language
# - In each case, the virtual repository serves as a single access point for developers to access a specific set of artifacts. 
# The virtual repository is composed of one or more local repositories, which contain the private artifacts developed within 
# an organization, and one or more remote repositories, which can be public open-source repositories. The remote repositories are used 
# to cache remote artifacts, eliminating the need to download them repeatedly and improving the build performance.
# - By creating a virtual repository and configuring the local and remote repositories that compose it, developers can collect all the 
# artifacts they need for a specific project in one place. The virtual repository also serves as a single source of truth for package 
# versioning and dependency management.
# - In summary, while the actual repository types may vary slightly depending on the specific package manager, Artifactory provides local, 
# remote, and virtual repositories that can be used to manage artifacts and dependencies efficiently for all the major programming languages 
# and package managers.
# https://www.freecodecamp.org/news/a-lightweight-tool-agnostic-ci-cd-flow-with-github-actions/
# Base Workflow: https://git.viasat.com/seceng-devsecops-platform/devsecops-client-runtime-blackduck/blob/master/.github/workflows/devsecops-python.yaml

name: artifactory-repo-deployment

# Avoid multiple CI jobs to execute for multiple commits in a given branch
# section #6: Saving Computation Time by Stopping Obsolete Workflows
concurrency:
  group: artifactory-repo-deployment-${{ github.ref }}-1
  cancel-in-progress: true

on:
  # Manual workflow execution
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  # https://github.com/actions/runner/issues/1483#issuecomment-969295757
  # https://github.com/orgs/community/discussions/25595#discussioncomment-3248417
  workflow_call:
    inputs:
      seceng-devsecops-dind-runner-label:
        description: "Docker-in-docker (dind) runner to use base label"
        required: false
        type: string
        # Base image for the label is at https://git.viasat.com/seceng-devsecops-platform/devsecops-platform-runtime-github_actions_runner
        default: devsecops

      docker-compose-file:
        description: "Docker Compose File to use"
        required: false
        type: string
        default: docker-compose.yaml

      docker-compose-context:
        description: "Directory containing the given docker-compose-file"
        required: false
        type: string
        default: "."

      docker-compose-service:
        description: "Docker Compose service to build"
        required: true
        type: string
      
      docker-build-mode:
        description: "How to build the deploy image"
        required: false
        type: string
        default: parallel

      artifactory-deploy-repo-type:
        description: "The type of deployment artifact to use"
        type: string
        required: false

      artifactory-deploy-workflow:
        description: "Deployment of artifactory artifacts based on types"
        type: string
        required: false
        # https://jfrog.com/blog/why-goproxy-matters-and-which-to-pick/
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/work-with-gosumdb
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/advanced-configuration-for-go-repositories
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/local-go-repositories
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/remote-go-repositories
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/virtual-go-repositories
        default: |
          {
            "host": "artifactory.viasat.com/artifactory",
            "type": "golang",
            "noSumDb": "git.viasat.com/*",
            "repo": {
              "virtual": "project-golang",
              "local": "project-golang-local"
            }
          }

    # We need to declare the intent of secrets. The pipelines reusing this must declare them!
    # https://github.com/orgs/community/discussions/26749#discussioncomment-3253230
    secrets:

      ARTIFACTORY_SVC_USER:
        description: "The username of the service account for Artifactory Docker registry Repository"
        required: true

      ARTIFACTORY_SVC_PASS:
        description: "The password associated with the username of the service account for Artifactory Docker registry Repository"
        required: true

      SLACK_CHANNEL_AUTOMATION_ID:
        description: "The Slack Automation ID"
        required: false

      SLACK_CHANNEL_AUTOMATION_TOKEN:
        description: "The token for the given Slack channel ID"
        required: false

# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:

  code:
    name: 🔧 code
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # Maybe to get twistlock action to run we need permission to read
    # https://github.com/actions/checkout/issues/254#issuecomment-1166945991
    permissions:
      contents: read  # <--- allows to read repo

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      # "set-output" in each of the steps[name].outputs is defined is where these are defined for the job
      githubActionJobName: ${{steps.set_base_values.outputs.githubActionJobName}}
      githubActionJobUrl: ${{steps.set_base_values.outputs.githubActionJobUrl}}
      githubActionRunId: ${{steps.set_base_values.outputs.githubActionRunId}}
      githubOrg: ${{steps.set_base_values.outputs.githubOrg}}
      defaultDockerImageVersion: ${{steps.set_base_values.outputs.defaultDockerImageVersion}}
      defaultDockerImageBranchTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchTag}}
      defaultDockerImageBranchShaTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchShaTag}}
      defaultDockerImageBranchTagForVersion: ${{steps.set_base_values.outputs.defaultDockerImageBranchTagForVersion}}
      dockerContextPath: ${{steps.set_base_values.outputs.dockerContextPath}}
      jobStartTimestamp: ${{steps.set_base_values.outputs.jobStartTimestamp}}
      gitShortSha: ${{steps.set_base_values.outputs.gitShortSha}}
      committerName: ${{steps.set_base_values.outputs.committerName}}
      committerEmail: ${{steps.set_base_values.outputs.committerEmail}}
      buildDateTime: ${{steps.set_base_values.outputs.buildDateTime}}
      gitopsDeployEnv: ${{steps.set_base_values.outputs.gitopsDeployEnv}}
      gitopsDeployUrl: ${{steps.set_base_values.outputs.gitopsDeployUrl}}
      gitopsDeploySegment: ${{steps.set_base_values.outputs.gitopsDeploySegment}}
      gitopsDeployTargetRepo: ${{steps.set_base_values.outputs.gitopsDeployTargetRepo}}
      gitopsDeployTargetRepoBranch: ${{steps.set_base_values.outputs.gitopsDeployTargetRepoBranch}}
      gitopsDeployTargetProvider: ${{steps.set_base_values.outputs.gitopsDeployTargetProvider}}
      gitopsDeployTargetRegion: ${{steps.set_base_values.outputs.gitopsDeployTargetRegion}}
      gitopsDeployTargetType: ${{steps.set_base_values.outputs.gitopsDeployTargetType}}
      gitopsDeployVersion: ${{steps.set_base_values.outputs.gitopsDeployVersion}}
      slackMessageId: ${{steps.slack.outputs.message_id}}

    steps:
      - name: Provided input to the app
        run: |
          echo "Inputs=${{ toJSON(inputs) }}"
      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🔧 code Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :recycle: Needs refactoring" >> $GITHUB_STEP_SUMMARY
          echo "* Installed latest git to self-hosted to be able to see the .git metadata dir " >> $GITHUB_STEP_SUMMARY
          echo "  * https://github.com/actions/checkout/issues/335#issuecomment-763159788 " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: Fetch all history and have .git locally for inspection
        uses: viarise/checkout@v3.0.2
        with:
          fetch-depth: 0

      # Write directly to GITHUB_ENV so that all steps have access to the same values
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#passing-values-between-steps-and-jobs-in-a-workflow
      - name: Set default envs from for tags and names
        run: |
          env
          echo "DEFAULT_DOCKER_IMAGE_VERSION=${GITHUB_SHA}" >> $GITHUB_ENV
          # The repo name only without refs 
          # https://stackoverflow.com/questions/13570327/how-to-delete-a-substring-using-shell-script/46104342#46104342
          REMOVE="refs/heads/"
          BRANCH_TAG=${GITHUB_REF/$REMOVE/}
          REMOVE="refs/tags/"
          BRANCH_TAG=${BRANCH_TAG/$REMOVE/}
          echo "BRANCH_TAG=${BRANCH_TAG}" >> $GITHUB_ENV
          # Remove the / from topic branches for versions, etc:
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG} | sed -e 's/\//-/g')
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG_FOR_VERSION} | sed -e 's/#/-/g')
          echo "BRANCH_TAG_FOR_VERSION=${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # The branch and sha together makes it easier to find
          GIT_SHORT_SHA=${GITHUB_SHA:0:7}
          echo "GIT_SHORT_SHA=${GIT_SHORT_SHA}" >> $GITHUB_ENV
          echo "BRANCH_SHA_TAG=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          echo "ARTIFACTORY_ARTIFACTS_VERSION=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # For twistcli
          echo "BUILD_JOB_NAME=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "BUILD_JOB_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          # https://stackoverflow.com/questions/60942067/get-current-date-and-time-in-github-workflows/60942437#60942437
          BUILD_DATE_TIME=$(date +'%Y-%m-%d %H:%m:%S %Z')
          echo "BUILD_DATE_TIME=${BUILD_DATE_TIME}" >> $GITHUB_ENV
          JOB_TIMESTAMP=$(date +%s)
          echo "JOB_TIMESTAMP=${JOB_TIMESTAMP}" >> $GITHUB_ENV
          # https://git-scm.com/docs/git-show
          COMMITTER_NAME=$(git --no-pager show -s --format="%an")
          echo "COMMITTER_NAME=${COMMITTER_NAME}" >> $GITHUB_ENV
          COMMITTER_EMAIL=$(git --no-pager show -s --format="%ae")
          echo "COMMITTER_EMAIL=${COMMITTER_EMAIL}" >> $GITHUB_ENV
          env

      # Override the version with the tag name since it's available on github.ref_name
      - name: Set version as Tag=${{ github.ref_name }} as it is a production release
        if: github.ref_type == 'tag'
        run: |
          echo "ARTIFACTORY_ARTIFACTS_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      # only setup deployment when the deployment object is provided
      - name: Setup default deployment properties for all releases
        if: ${{ inputs.gitops-deploy-workflow != '' }}
        run: |
          GITOPS_WORKFLOW='${{ inputs.gitops-deploy-workflow }}'
          echo "deploy_workflow=${GITOPS_WORKFLOW}"
          GITOPS_TARGET_REPO=$(echo ${GITOPS_WORKFLOW} | jq -r '.target.repo')
          GITOPS_TARGET_REPO_BRANCH=$(echo ${GITOPS_WORKFLOW} | jq -r '.target.ref')
          GITOPS_TARGET_PROVIDER=$(echo ${GITOPS_WORKFLOW} | jq -r '.cluster.provider')
          GITOPS_TARGET_REGION=$(echo ${GITOPS_WORKFLOW} | jq -r '.cluster.region')
          GITOPS_TARGET_TYPE=$(echo ${GITOPS_WORKFLOW} | jq -r '.cluster.type')
          echo "GITOPS_TARGET_REPO=${GITOPS_TARGET_REPO}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_REPO_BRANCH=${GITOPS_TARGET_REPO_BRANCH}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_PROVIDER=${GITOPS_TARGET_PROVIDER}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_REGION=${GITOPS_TARGET_REGION}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_TYPE=${GITOPS_TARGET_TYPE}" >> $GITHUB_ENV
          
      # Execute for DEV and STG
      - name: Setup deployment properties for branch
        if: ${{ inputs.gitops-deploy-workflow != '' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') }}
        run: |
          GITOPS_WORKFLOW='${{ inputs.gitops-deploy-workflow }}'
          echo "deploy_workflow=${GITOPS_WORKFLOW}"
          GITOPS_TARGET_ENV=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs[$branch].env')
          GITOPS_TARGET_SEGMENT=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs[$branch].segment')
          GITOPS_TARGET_URL=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs[$branch].url')
          echo "GITOPS_TARGET_ENV=${GITOPS_TARGET_ENV}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_SEGMENT=${GITOPS_TARGET_SEGMENT}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_URL=${GITOPS_TARGET_URL}" >> $GITHUB_ENV

      # Execute for the PRD TAGs
      - name: Setup deployment properties for tag
        if: ${{ inputs.gitops-deploy-workflow != '' && github.ref_type == 'tag' }}
        run: |
          GITOPS_WORKFLOW='${{ inputs.gitops-deploy-workflow }}'
          echo "deploy_workflow=${GITOPS_WORKFLOW}"
          GITOPS_TARGET_ENV=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs.tag.env')
          GITOPS_TARGET_SEGMENT=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs.tag.segment')
          GITOPS_TARGET_URL=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs.tag.url')
          echo "GITOPS_TARGET_ENV=${GITOPS_TARGET_ENV}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_SEGMENT=${GITOPS_TARGET_SEGMENT}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_URL=${GITOPS_TARGET_URL}" >> $GITHUB_ENV

      - name: Setting values
        id: set_base_values
        run: |
          # The below outputs a JSON array of check tasks for each subproject
          #  and uses GitHub Actions magic (::set-output) to set an output
          #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
          # https://github.community/t/sharing-a-variable-between-jobs/16967/14
          echo "::set-output name=githubActionJobName::$BUILD_JOB_NAME"
          echo "::set-output name=githubActionJobUrl::$BUILD_JOB_URL"
          echo "::set-output name=githubActionRunId::$GITHUB_RUN_ID"
          echo "::set-output name=dockerContextPath::${{ inputs.docker-compose-context }}"
          echo "::set-output name=defaultDockerImageVersion::$DEFAULT_DOCKER_IMAGE_VERSION"
          echo "::set-output name=defaultDockerImageBranchTag::$BRANCH_TAG"
          echo "::set-output name=defaultDockerImageBranchTagForVersion::$BRANCH_TAG_FOR_VERSION"
          echo "::set-output name=defaultDockerImageBranchShaTag::$BRANCH_SHA_TAG"
          echo "::set-output name=gitShortSha::$GIT_SHORT_SHA"
          echo "::set-output name=buildDateTime::$BUILD_DATE_TIME"
          echo "::set-output name=jobStartTimestamp::$JOB_TIMESTAMP"
          echo "::set-output name=committerName::$COMMITTER_NAME"
          echo "::set-output name=committerEmail::$COMMITTER_EMAIL"
          echo "::set-output name=githubOrg::$GITHUB_REPOSITORY_OWNER"
          echo "::set-output name=gitopsDeployEnv::$GITOPS_TARGET_ENV"
          echo "::set-output name=gitopsDeployUrl::$GITOPS_TARGET_URL"
          echo "::set-output name=gitopsDeploySegment::$GITOPS_TARGET_SEGMENT"
          echo "::set-output name=gitopsDeployTargetRepo::$GITOPS_TARGET_REPO"
          echo "::set-output name=gitopsDeployTargetRepoBranch::$GITOPS_TARGET_REPO_BRANCH"
          echo "::set-output name=gitopsDeployTargetProvider::$GITOPS_TARGET_PROVIDER"
          echo "::set-output name=gitopsDeployTargetRegion::$GITOPS_TARGET_REGION"
          echo "::set-output name=gitopsDeployTargetType::$GITOPS_TARGET_TYPE"
          echo "::set-output name=gitopsDeployVersion::$ARTIFACTORY_ARTIFACTS_VERSION"

      # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
      - name: Annotate Job with current information
        if: ${{ inputs.gitops-deploy-workflow != '' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref_type == 'tag') }}
        run: |
          echo "```json" >> $GITHUB_STEP_SUMMARY
          for JSON_LINE in "${{ toJSON(steps.set_base_values.outputs) }}"; do
            echo "${JSON_LINE}" >> $GITHUB_STEP_SUMMARY
          done
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "## :page_facing_up: Metadata output" >> $GITHUB_STEP_SUMMARY
          echo "# :building_construction: Deployment Plan" >> $GITHUB_STEP_SUMMARY
          echo "* :octocat: Deploy repo: ${GITOPS_TARGET_REPO}" >> $GITHUB_STEP_SUMMARY
          echo "* :herb: Deploy repo branch: ${GITOPS_TARGET_REPO_BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "* :cloud: Provider: ${GITOPS_TARGET_PROVIDER}" >> $GITHUB_STEP_SUMMARY
          echo "* :world_map: Region: ${GITOPS_TARGET_REGION}" >> $GITHUB_STEP_SUMMARY
          echo "* :compass: Segment: ${GITOPS_TARGET_SEGMENT}" >> $GITHUB_STEP_SUMMARY
          echo "* :ice_cube: Type: ${GITOPS_TARGET_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "* :canoe: Env: ${GITOPS_TARGET_ENV}" >> $GITHUB_STEP_SUMMARY
          echo "* :link: Env Url: ${GITOPS_TARGET_URL}" >> $GITHUB_STEP_SUMMARY

      - name: Annotate Job with current information
        if: ${{ inputs.gitops-deploy-workflow != '' && github.ref_type == 'branch' }}
        run: |
          echo "* :bookmark: App Version: ${ARTIFACTORY_ARTIFACTS_VERSION}" >> $GITHUB_STEP_SUMMARY

      # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
      - name: Annotate Job with current information
        if: ${{ inputs.gitops-deploy-workflow != '' && github.ref_type == 'tag' }}
        run: |
          echo "* :bookmark: App Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Annotate Job with notification status
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :loudspeaker: notify" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo * Successfully notified Slack Channel >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  build:
    name: 📦 build
    needs: [code]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://stackoverflow.com/questions/58139175/running-actions-in-another-directory/63122434#63122434
    defaults:
      run:
        working-directory: ${{ inputs.docker-compose-context }}

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      # "set-output" in each of the steps[name].outputs is defined is where these are defined for the job
      defaultDockerRegistry: ${{steps.set_docker_image_settings.outputs.defaultDockerRegistry}}
      defaultDockerImageRepo: ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}
      defaultDockerService: ${{steps.set_docker_image_settings.outputs.defaultDockerService}}
      originalDockerImageTag: ${{steps.set_docker_image_settings.outputs.originalDockerImageTag}}
      githubRepoPaths: ${{steps.set_docker_image_settings.outputs.githubRepoPaths}}
      dockerImageArtifactoryUrl: ${{steps.set_docker_image_settings.outputs.dockerImageArtifactoryUrl}}

    steps:
      # Checkout always fetches the whole repo. Depending on the size, this will be super long
      - name: Fetch only the top commit
        uses: viarise/checkout@v2
        with:
          fetch-depth: 1

      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 📦 build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ARTIFACTORY_ARTIFACTS_VERSION=${{needs.code.outputs.gitopsDeployVersion}}" >> $GITHUB_ENV

      - name: Find out the image repo name and version
        run: |
          env
          # Find out the name of the docker image declared in the docker-compose image section of the default service
          if [ -n "${{ inputs.docker-compose-file }}" ] && [ -f "${{ inputs.docker-compose-file }}" ]; then
            DEFAULT_DOCKER_IMAGE_REPO=$(docker-compose -f ${{ inputs.docker-compose-file }} config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          else
            DEFAULT_DOCKER_IMAGE_REPO=$(docker-compose config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          fi
          echo "DEFAULT_DOCKER_IMAGE_REPO=${DEFAULT_DOCKER_IMAGE_REPO}" >> $GITHUB_ENV
          ORIGINAL_DOCKER_IMAGE_TAG=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F":" '{ print $2 }')
          echo "ORIGINAL_DOCKER_IMAGE_TAG=${ORIGINAL_DOCKER_IMAGE_TAG}" >> $GITHUB_ENV
          # The registry is the first part of the registry/repo/folder
          DEFAULT_DOCKER_REGISTRY=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F "/" '{print $1}')
          echo "DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}" >> $GITHUB_ENV
          # Just break down the paths for links in artifactory
          REGISTRY="${DEFAULT_DOCKER_REGISTRY}/"
          GITHUB_REPOSITORY_PATHS=${DEFAULT_DOCKER_IMAGE_REPO/$REGISTRY/}
          GITHUB_REPOSITORY_PATHS=$(echo ${GITHUB_REPOSITORY_PATHS} | sed -e "s/-/\//g")
          GITHUB_REPOSITORY_PATHS=${GITHUB_REPOSITORY_PATHS/$ORIGINAL_DOCKER_IMAGE_TAG} 
          echo "GITHUB_REPOSITORY_PATHS=${GITHUB_REPOSITORY_PATHS}" >> $GITHUB_ENV
          # Extract the first token, repository path, and image tag from the image string
          ARTIFACTORY_REPO_TOKEN="$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | cut -d '.' -f1)"
          ARTIFACTORY_REPO_PATH="$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F: '{print substr($1, index($1,"/")+1)}')"
          # Construct the new artifactory URL
          ARTIFACTORY_URL="https://artifactory.viasat.com/ui/repos/tree/General/${ARTIFACTORY_REPO_TOKEN}/${ARTIFACTORY_REPO_PATH}/${{needs.code.outputs.gitopsDeployVersion}}"
          echo "ARTIFACTORY_URL=$ARTIFACTORY_URL" >> $GITHUB_ENV

      - id: set_docker_image_settings
        # The below outputs a JSON array of check tasks for each subproject
        #  and uses GitHub Actions magic (::set-output) to set an output
        #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
        # https://github.community/t/sharing-a-variable-between-jobs/16967/14
        run: |
          env
          if [ -z "${{ inputs.docker-compose-service }}" ] || [ -z "${DEFAULT_DOCKER_IMAGE_REPO}" ] || [ -z "${DEFAULT_DOCKER_REGISTRY}" ]; then
            echo "ERROR: Couldn't define either ${{ inputs.docker-compose-service }}='${{ inputs.docker-compose-service }}' or DEFAULT_DOCKER_IMAGE_REPO='${DEFAULT_DOCKER_IMAGE_REPO} or DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}'. Check the logs!"
            exit 1
          fi
          echo "::set-output name=defaultDockerImageRepo::$DEFAULT_DOCKER_IMAGE_REPO"
          echo "::set-output name=defaultDockerService::${{ inputs.docker-compose-service }}"
          echo "::set-output name=defaultDockerRegistry::$DEFAULT_DOCKER_REGISTRY"
          echo "::set-output name=originalDockerImageTag::$ORIGINAL_DOCKER_IMAGE_TAG"
          echo "::set-output name=githubRepoPaths::$GITHUB_REPOSITORY_PATHS"
          echo "::set-output name=dockerImageArtifactoryUrl::$ARTIFACTORY_URL"

      - name: Set additional envs to docker compose build execution
        id: artifactory-settings
        if: ${{ inputs.artifactory-deploy-workflow != '' && inputs.artifactory-deploy-repo-type != '' }} 
        run: |
          echo "Parsing the artifactory deployment types '${{ inputs.artifactory-deploy-repo-type }}'"
          obj=$(echo '${{ inputs.artifactory-deploy-workflow }}' | jq '.')
          host=$(echo $obj | jq -r '.host')
          type=$(echo $obj | jq -r '.type')
          selected_repo=$(echo $obj | jq -r --arg deployRepoType "${{ inputs.artifactory-deploy-repo-type }}" '.repo[$deployRepoType]')
          noSumDb=$(echo $obj | jq -r '.noSumDb')
      
          if [ "$type" = "golang" ] && [ "${{ inputs.artifactory-deploy-repo-type }}" = "virtual" ]; then
            goproxy="https://${{ secrets.ARTIFACTORY_SVC_USER }}:${{ secrets.ARTIFACTORY_SVC_PASS }}@$host/$selected_repo"
            echo "Setting env var GOPROXY=$goproxy"
            echo "Setting env var GONOSUMDB=$noSumDb"
            echo "GOPROXY=$goproxy" >> $GITHUB_ENV
            echo "GONOSUMDB=$noSumDb" >> $GITHUB_ENV
          fi

      - name: Review Env Vars
        run: |
          echo "Current env with parsed values"
          env

      - name: Annotate Job with current information
        run: |
          echo 'build-outputs=${{ toJSON(steps.set_docker_image_settings.outputs) }}'
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :page_facing_up: Metadata output" >> $GITHUB_STEP_SUMMARY

      # Newer buildx setting:
      # https://github.com/docker/setup-buildx-action/issues/105#issuecomment-910928571
      # https://github.com/docker/buildx/issues/413#issuecomment-710656847
      - name: Set up Docker Context for Buildx
        if: ${{ github.ref_type == 'branch' && inputs.docker-build-mode == 'parallel' }}
        id: buildx-context
        run: |
          docker context create builders-context

      # https://github.community/t/use-docker-layer-caching-with-docker-compose-build-not-just-docker/156049/3
      # https://github.com/docker/build-push-action/blob/master/docs/advanced/export-docker.md
      # https://mmeendez8.github.io/2021/07/19/new-docker-cache-is-out.html
      - name: Set up Docker Buildx
        id: buildx
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'branch' && inputs.docker-build-mode == 'parallel' }}
        uses: seceng-devsecops-platform/docker-setup-buildx-action@master
        with:
          endpoint: builders-context

      - name: Annotate Job with current information
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'branch' }}
        run: |
          echo 'build-outputs=${{ toJSON(steps.buildx.outputs) }}'
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :whale: Docker Metadata" >> $GITHUB_STEP_SUMMARY
          echo "* Version: ARTIFACTORY_ARTIFACTS_VERSION=${{needs.code.outputs.gitopsDeployVersion}}" >> $GITHUB_STEP_SUMMARY
      #          echo "" >> $GITHUB_STEP_SUMMARY
#          echo "```json" >> $GITHUB_STEP_SUMMARY
#          echo 'outputs=${{ toJSON(steps.buildx.outputs) }}' >> $GITHUB_STEP_SUMMARY
#          echo "```" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY

      # https://docs.github.com/en/packages/learn-github-packages/connecting-a-repository-to-a-package
      # https://github.community/t/github-container-registry-ghcr-io-packages-not-appearing-in-webinterface/130077
      # Manually make the image public by going to the module's settings, Danger Zone
      - name: Set Docker Buildx properties
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'branch' && inputs.docker-build-mode == 'parallel' }}
        run: |
          # https://github.com/opencontainers/image-spec/blob/main/annotations.md
          export LABEL_VALUE=https://git.viasat.com/${GITHUB_REPOSITORY}/tree/${{needs.code.outputs.defaultDockerImageBranchTag}}/${{ inputs.docker-compose-context }}
          echo "Adding labels to Dockerfile"
          # https://stackoverflow.com/questions/845863/how-to-use-in-an-xargs-command/70230514#70230514
          find . -name 'Dockerfile' -print0 | xargs -0 grep -iL "org.opencontainers.image.source" | xargs -0 -I{} sh -c 'echo "LABEL org.opencontainers.image.source ${LABEL_VALUE}" >> {}' -- {}
          find . -name 'Dockerfile' -print0 | xargs -0 grep -iL "org.opencontainers.image.created" | xargs -0 -I{} sh -c 'echo "LABEL org.opencontainers.image.created ${{needs.code.outputs.buildDateTime}}" >> {}' -- {}
          find . -name 'Dockerfile' -print0 | xargs -0 grep -iL "org.opencontainers.image.version" | xargs -0 -I{} sh -c 'echo "LABEL org.opencontainers.image.version ${GITHUB_SHA}" >> {}' -- {}
          # https://docs.docker.com/engine/reference/commandline/buildx_bake/#file
          echo "Using Version: ARTIFACTORY_ARTIFACTS_VERSION=${{ needs.code.outputs.gitopsDeployVersion }}"
          if [ -n "${{ inputs.docker-compose-file }}" ] && [ -f "${{ inputs.docker-compose-file}}" ]; then
            echo "Specifying the buildx bake by the service compose file."
            docker compose -f ${{ inputs.docker-compose-file }} config ${{ inputs.docker-compose-service }};
            docker buildx bake -f ${{ inputs.docker-compose-file }} ${{ inputs.docker-compose-service }} --print;
          else
            docker compose config ${{ inputs.docker-compose-service }}
            docker buildx bake ${{ inputs.docker-compose-service }} --print
          fi

      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to Artifactory Docker Registry
        if: ${{ github.ref_type == 'branch' }}
        uses: seceng-devsecops-platform/docker-login-action@v1
        with:
          registry: ${{ env.DEFAULT_DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_SVC_USER }}
          password: ${{ secrets.ARTIFACTORY_SVC_PASS }}

      - name: Annotate Job with current information
        if: ${{ github.ref_type == 'branch' }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "* Logged to ${{ env.DEFAULT_DOCKER_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # TODO: since we are using self-hosted, the docker image is saved in the same host
      # https://docs.docker.com/engine/reference/commandline/buildx_bake/
      - name: Build Docker Image in Parallel mode using bake
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'branch' && inputs.docker-build-mode == 'parallel' }}
        id: docker-bake
        uses: seceng-devsecops-platform/docker-bake-action@v2.2.0
        with:
          push: true
          # https://github.com/docker/bake-action/pull/76
          workdir: ./${{ inputs.docker-compose-context }}
          targets: ${{steps.set_docker_image_settings.outputs.defaultDockerService}}
          builder: ${{ steps.buildx.outputs.name }}
          files: ./${{ inputs.docker-compose-file }}
          # Builds a docker image and create multiple tags based on the tags below for the ${{ inputs.docker-compose-service }} in docker-compose
          # All the properties from https://github.com/docker/buildx/blob/master/docs/reference/buildx_bake.md#set
          # https://github.community/t/use-docker-layer-caching-with-docker-compose-build-not-just-docker/156049/3
          # https://stackoverflow.com/questions/55756372/when-using-buildkit-with-docker-how-do-i-see-the-output-of-run-commands/55759337#55759337
          # https://github.com/docker/buildx/blob/master/docs/reference/buildx_bake.md#set
          # https://github.com/docker/buildx/issues/872#issuecomment-1014891886
          # # ${{steps.set-docker-image-settings.outputs.defaultDockerService}} could be used in addition to ${{ inputs.docker-compose-service }}
          # Adding gha cache for GHE 3.8+ https://docs.docker.com/build/cache/backends/gha/#using-dockerbuild-push-action: This fails with 
          #    the followinghttps://gist.git.viasat.com/mdesales/9868f314c971eead6aae5c2b85539eaa
          set: |
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.tags=${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.cache-from=type=registry,ref=${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:gha-cache
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.cache-to=type=registry,mode=max,ref=${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:gha-cache
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.platform=${{ inputs.docker-build-platforms }}

      # TODO: since we are using self-hosted, the docker image is saved in the same host
      # https://docs.docker.com/engine/reference/commandline/buildx_bake/
      - name: Build Docker Image in mode ${{ inputs.inputs.docker-build-mode }}
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'branch' && inputs.docker-build-mode != 'parallel' }}
        id: docker-compose
        run: |
          DOCKER_BUILDKIT=0 docker compose -f ${{ inputs.docker-compose-file }} build
          docker tag ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}} ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
          docker push ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}

      - name: Annotate Job with current information
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'branch' }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "* Built and pushed docker image" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY
#          echo "```json" >> $GITHUB_STEP_SUMMARY
#          echo 'outputs=${{ toJSON(steps.docker-bake.outputs) }}' >> $GITHUB_STEP_SUMMARY
#          echo "```" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: 🚀 deploy
    # https://stackoverflow.com/questions/63148639/create-dependencies-between-jobs-in-github-actions/63148947#63148947
    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    needs: [code, build]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

#    # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
#    environment:
#      name: artifactory-${{ needs.code.outputs.gitopsDeployEnv }}
#      url: ${{needs.build.outputs.dockerImageArtifactoryUrl}}

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      repository: ${{steps.artifactory-settings.outputs.repository}}

    steps:
      # Checkout always fetches the whole repo. Depending on the size, this will be super long
      - name: Fetch only the top commit
        uses: viarise/checkout@v2
        with:
          fetch-depth: 1

      - name: Annotate Job with current information for DEV and STG
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🚀 deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          env
          # Find out the name of the docker image declared in the docker-compose image section of the default service
          if [ -n "${{ inputs.docker-compose-file }}" ] && [ -f "${{ inputs.docker-compose-file }}" ]; then
            DEFAULT_DOCKER_IMAGE_REPO=$(docker-compose -f ${{ inputs.docker-compose-file }} config | yq e . - -o json | docker run --rm -i dockerhub.docker.artifactory.viasat.com/imega/jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          else
            DEFAULT_DOCKER_IMAGE_REPO=$(docker-compose config | yq e . - -o json | docker run --rm -i dockerhub.docker.artifactory.viasat.com/imega/jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          fi
          echo "DEFAULT_DOCKER_IMAGE_REPO=${DEFAULT_DOCKER_IMAGE_REPO}" >> $GITHUB_ENV
          ORIGINAL_DOCKER_IMAGE_TAG=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F":" '{ print $2 }')
          echo "ORIGINAL_DOCKER_IMAGE_TAG=${ORIGINAL_DOCKER_IMAGE_TAG}" >> $GITHUB_ENV
          # The registry is the first part of the registry/repo/folder
          DEFAULT_DOCKER_REGISTRY=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F "/" '{print $1}')
          echo "DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}" >> $GITHUB_ENV

      - name: Annotate Job with current information for PRD
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'tag' }}
        run: |
          echo "ORIGINAL_DOCKER_IMAGE_TAG=${{ needs.code.outputs.gitopsDeployVersion }}" >> $GITHUB_ENV
      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to Artifactory Docker Registry
        uses: seceng-devsecops-platform/docker-login-action@v1
        with:
          registry: ${{ env.DEFAULT_DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_SVC_USER }}
          password: ${{ secrets.ARTIFACTORY_SVC_PASS }}

      - name: Pull built docker-image for non-tag execution
        # When building in a branch, the image is likely to be already present as soon as this executes
        if: ${{ github.ref_type == 'branch' }}
        run: |
          docker pull ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
          echo "Current images"
          docker image ls -a

      - name: Pull built docker-image on Tag
        # However, when we are processing a release, we might be waiting on the build of the merge so, we need to wait
        if: ${{ github.ref_type == 'tag' }}
        run: |
          IMAGE=${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
          attempt=0
          total=$(( ${{ inputs.docker-compose-releases-wait-for-build }} / 10 ))
          while ! docker pull $IMAGE; do
            if [ $attempt -gt 0 ]; then
              echo "Image not found, retrying in 10 seconds after $attempt/${total} attempts..."
            fi
            attempt=$((attempt+1))
            if [ $attempt -eq ${total} ]; then
              echo "Image not found after ${total} seconds, exiting..."
              exit 1
            fi
            sleep 10
          done

      - name: Set additional envs to docker compose build execution
        id: artifactory-settings
        if: ${{ inputs.artifactory-deploy-workflow != '' && inputs.artifactory-deploy-repo-type != '' }} 
        run: |
          echo "Parsing the artifactory deployment settings'"
          obj=$(echo '${{ inputs.artifactory-deploy-workflow }}' | jq '.')
          host=$(echo $obj | jq -r '.host')
          type=$(echo $obj | jq -r '.type')
          repo_virtual=$(echo $obj | jq -r '.repo.virtual')
          repo_local=$(echo $obj | jq -r '.repo.virtual')
          noSumDb=$(echo $obj | jq -r '.noSumDb')
          
          echo "repository=$selected_repo" >> $GITHUB_OUTPUT
          echo "ARTIFACTORY_HOST=$host" >> $GITHUB_ENV
          echo "ARTIFACTORY_SVC_USER=${{ secrets.ARTIFACTORY_SVC_USER }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_SVC_PASS=${{ secrets.ARTIFACTORY_SVC_PASS }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_REPO_VIRTUAL=$repo_virtual" >> $GITHUB_ENV
          echo "ARTIFACTORY_REPO_LOCAL=$repo_local" >> $GITHUB_ENV
          echo "ARTIFACTORY_ARTIFACTS_VERSION=${{ needs.code.outputs.gitopsDeployVersion }}" >> $GITHUB_ENV

          if [ "$type" = "golang" ] && [ "${{ inputs.artifactory-deploy-repo-type }}" = "virtual" ]; then
            goproxy="https://${{ secrets.ARTIFACTORY_SVC_USER }}:${{ secrets.ARTIFACTORY_SVC_PASS }}@$host/$selected_repo"
            echo "Setting env var GOPROXY=$goproxy"
            echo "Setting env var GONOSUMDB=$noSumDb"
            echo "GOPROXY=$goproxy" >> $GITHUB_ENV
            echo "GONOSUMDB=$noSumDb" >> $GITHUB_ENV
          fi

     # TODO: since we are using self-hosted, the docker image is saved in the same host
      # https://docs.docker.com/engine/reference/commandline/buildx_bake/
      - name: Execute the deployment of artifacts declared using mode ${{ inputs.inputs.docker-build-mode }}
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        run: |
          docker compose -f ${{ inputs.docker-compose-file }} run ${{needs.build.outputs.defaultDockerImageRepo}}

  report:
    name: 📢 notify
    # https://stackoverflow.com/questions/63148639/create-dependencies-between-jobs-in-github-actions/63148947#63148947
    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://stackoverflow.com/questions/58858429/how-to-run-a-github-actions-step-even-if-the-previous-step-fails-while-still-f/58859404#58859404
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref_type == 'tag') }}

    # https://github.com/github-community/community/discussions/15452#discussioncomment-2668767
    #continue-on-error: true

    needs: [code, build, deploy]

    # providing permissions
    permissions:
      # Used for identity the github status results
      # https://github.com/technote-space/workflow-conclusion-action/issues/122
      contents: read
      # https://docs.github.com/en/rest/actions/workflow-jobs?apiVersion=2022-11-28#list-jobs-for-a-workflow-run
      actions: read

    steps:
      # run this action to get the workflow conclusion, if any of the previous jobs failed, it will fail the whole workflow
      # You can get the conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: seceng-devsecops-platform/technote-space-workflow-conclusion-action@v3.0.1

      - name: Slack Notification of successful build of https://git.viasat.com/${{ github.repository }}@${{ github.ref }}
        uses: seceng-devsecops-platform/wearerequired-slack-messaging-action@v2.0.0
        # Populated by technote-space-workflow-conclusion-action above
        # # neutral, success, skipped, cancelled, timed_out, action_required, failure
        if: ${{ env.WORKFLOW_CONCLUSION == 'success' }}
        with:
          bot_token: ${{ secrets.SLACK_CHANNEL_AUTOMATION_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_AUTOMATION_ID }}
          message_id: ${{ needs.code.outputs.slackMessageId }} # Updates existing message from the first step.
          payload: >-
            {
                "text": ":github_octocat: *${{ github.repository }}* :firework-2: *CD Passed* :viasat-signal-animated-transparent: \n <https://git.viasat.com/${{ github.repository }}|${{ github.repository }}>",
                "attachments": [
                    {
                        "color": "warning",
                        "fields": [
                            {
                              "title": "#️⃣ Revision",
                              "value": "<https://git.viasat.com/${{ github.repository }}/commit/${{needs.code.outputs.gitShortSha}}|${{needs.code.outputs.gitShortSha}}>",
                              "short": true
                            },
                            {
                              "title": "🌿 Branch",
                              "value": "<https://git.viasat.com/${{ github.repository }}/tree/${{needs.code.outputs.defaultDockerImageBranchTag}}|${{needs.code.outputs.defaultDockerImageBranchTag}}>",
                              "short": true
                            },
                            {
                              "title": "👤 Author",
                              "value": "<${{ github.event.sender.html_url }}|${{needs.code.outputs.committerName}}, ${{needs.code.outputs.committerEmail}}>",
                              "short": true
                            },
                            {
                              "title": "🚀 deploy Job",
                              "value": "<https://git.viasat.com/${{ github.repository }}/actions/runs/${{github.run_id}}|${{github.run_id}}>",
                              "short": true
                            },
                            {
                              "title": ":artfactory: Repository",
                              "value": "<https://artifactory.viasat.com/ui/repos/tree/General/${{needs.deploy.outputs.repository}}|${{needs.deploy.outputs.repository}}>",
                              "short": true
                            }
                        ],
                        "footer": "<${{needs.code.outputs.githubActionJobUrl}}>"
                    }
                ]
            }

      - name: Slack Notification build failure of https://git.viasat.com/${{ github.repository }}@${{ github.ref }}
        uses: seceng-devsecops-platform/wearerequired-slack-messaging-action@v2.0.0

        # Populated by technote-space-workflow-conclusion-action above
        # # neutral, success, skipped, cancelled, timed_out, action_required, failure
        if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
        with:
          bot_token: ${{ secrets.SLACK_CHANNEL_AUTOMATION_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_AUTOMATION_ID }}
          message_id: ${{ needs.code.outputs.slackMessageId }} # Updates existing message from the first step.
          payload: >-
            {
                "text": ":github_octocat: *${{ github.repository }}* :tire-fire: *CD Failed* :viasat-signal-animated-transparent: \n <https://git.viasat.com/${{ github.repository }}|${{ github.repository }}>",
                "attachments": [
                    {
                        "color": "failure",
                        "fields": [
                            {
                              "title": "#️⃣ Revision",
                              "value": "<https://git.viasat.com/${{ github.repository }}/commit/${{needs.code.outputs.gitShortSha}}|${{needs.code.outputs.gitShortSha}}>",
                              "short": true
                            },
                            {
                              "title": "🌿 Branch",
                              "value": "<https://git.viasat.com/${{ github.repository }}/tree/${{needs.code.outputs.defaultDockerImageBranchTag}}|${{needs.code.outputs.defaultDockerImageBranchTag}}>",
                              "short": true
                            },
                            {
                              "title": "👤 Author",
                              "value": "<${{ github.event.sender.html_url }}|${{needs.code.outputs.committerName}}, ${{needs.code.outputs.committerEmail}}>",
                              "short": true
                            },
                            {
                              "title": "🚀 deploy Job",
                              "value": "<https://git.viasat.com/${{ github.repository }}/actions/runs/${{github.run_id}}|${{github.run_id}}>",
                              "short": true
                            },
                            {
                              "title": ":artfactory: Repository",
                              "value": "<https://artifactory.viasat.com/ui/repos/tree/General/${{needs.deploy.outputs.repository}}|${{needs.deploy.outputs.repository}}>",
                              "short": true
                            }
                        ],
                        "footer": "<${{needs.code.outputs.githubActionJobUrl}}>"
                    }
                ]
            }
