####
#### Author: Marcello DeSales (@mdesales)
####
# Executes security verification of dockerized projects
# https://www.freecodecamp.org/news/a-lightweight-tool-agnostic-ci-cd-flow-with-github-actions/
# Base Workflow: https://git.viasat.com/seceng-devsecops-platform/devsecops-client-runtime-blackduck/blob/master/.github/workflows/devsecops-python.yaml

name: docker-image-devsecops-check

on:
  # Manual workflow execution
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  # https://github.com/actions/runner/issues/1483#issuecomment-969295757
  # https://github.com/orgs/community/discussions/25595#discussioncomment-3248417
  workflow_call:
    inputs:

      docker-compose-context:
        description: "The location where the docker compose is available"
        required: false
        type: string
        default: .

      docker-compose-file:
        description: "Docker Compose File to use"
        required: false
        type: string
        default: docker-compose.yaml

      docker-compose-service:
        description: "Docker Compose service to build"
        required: true
        type: string

      seceng-devsecops-dind-runner-label:
        description: "Docker-in-docker (dind) runner to use base label"
        required: false
        type: string
        # Base image for the label is at https://git.viasat.com/seceng-devsecops-platform/devsecops-platform-runtime-github_actions_runner
        default: devsecops

      seceng-devsecops-prisma-domain:
        description: "SecEng Prisma Cloud hostname to send the scans of the docker image to"
        required: false
        type: string
        default: twistlock.infosec.viasat.io

      seceng-devsecops-prisma-wait-for-build:
        description: "Time in seconds to wait for the build as an approximate value"
        required: false
        type: number
        default: 300

      seceng-devsecops-prisma-project:
        description: "Prisma Project to scan the docker image"
        required: true
        type: string

    # We need to declare the intent of secrets. The pipelines reusing this must declare them!
    # https://github.com/orgs/community/discussions/26749#discussioncomment-3253230
    secrets:

      ARTIFACTORY_SVC_USER:
        description: "The username of the service account for Artifactory Docker registry Repository"
        required: true

      ARTIFACTORY_SVC_PASS:
        description: "The password associated with the username of the service account for Artifactory Docker registry Repository"
        required: true

      SECENG_DEVSECOPS_CLIENT_PRISMA_USERNAME:
        description: "The username of the CI user from SecEng Prisma Cloud / Twistlock"
        required: true

      SECENG_DEVSECOPS_CLIENT_PRISMA_PASSWORD:
        description: "The password associated with the CI user from SecEng Prisma Cloud / Twistlock"
        required: true

# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:
  code:
    name: 🔧 code
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # Maybe to get twistlock action to run we need permission to read
    # https://github.com/actions/checkout/issues/254#issuecomment-1166945991
    permissions:
      contents: read # <--- allows to read repo

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      githubActionJobUrl: ${{steps.set_base_values.outputs.githubActionJobUrl}}
      githubActionRunId: ${{steps.set_base_values.outputs.githubActionRunId}}
      githubOrg: ${{steps.set_base_values.outputs.githubOrg}}
      defaultDockerImageVersion: ${{steps.set_base_values.outputs.defaultDockerImageVersion}}
      defaultDockerImageBranchTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchTag}}
      jobStartTimestamp: ${{steps.set_base_values.outputs.jobStartTimestamp}}
      gitShortSha: ${{steps.set_base_values.outputs.gitShortSha}}
      committerName: ${{steps.set_base_values.outputs.committerName}}
      committerEmail: ${{steps.set_base_values.outputs.committerEmail}}
      buildDateTime: ${{steps.set_base_values.outputs.buildDateTime}}
      gitopsDeployVersion: ${{steps.set_base_values.outputs.gitopsDeployVersion}}
      defaultDockerImageBranchShaTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchShaTag}}
      defaultDockerRegistry: ${{steps.set_docker_image_settings.outputs.defaultDockerRegistry}}
      defaultDockerImageRepo: ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}
      defaultDockerService: ${{steps.set_docker_image_settings.outputs.defaultDockerService}}
      originalDockerImageTag: ${{steps.set_docker_image_settings.outputs.originalDockerImageTag}}
      githubRepoPaths: ${{steps.set_docker_image_settings.outputs.githubRepoPaths}}
      dockerImageArtifactoryUrl: ${{steps.set_docker_image_settings.outputs.dockerImageArtifactoryUrl}}

    steps:
      - name: Fetch all history and have .git locally for inspection
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Dump GitHub Env
        run: env

      # Write directly to GITHUB_ENV so that all steps have access to the same values
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#passing-values-between-steps-and-jobs-in-a-workflow
      - name: Set default envs from for tags and names
        run: |
          export DEFAULT_DOCKER_IMAGE_VERSION=${{ github.event.pull_request.head.sha }}
          echo "DEFAULT_DOCKER_IMAGE_VERSION=${DEFAULT_DOCKER_IMAGE_VERSION}" >> $GITHUB_ENV

          # The repo name only without refs
          # https://stackoverflow.com/questions/13570327/how-to-delete-a-substring-using-shell-script/46104342#46104342
          BRANCH_TAG=${GITHUB_HEAD_REF}
          echo "BRANCH_TAG=${BRANCH_TAG}" >> $GITHUB_ENV
          # Remove the / from topic branches for versions, etc:
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG} | sed -e 's/\//-/g')
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG_FOR_VERSION} | sed -e 's/#/-/g')
          echo "BRANCH_TAG_FOR_VERSION=${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV

          # The branch and sha together makes it easier to find
          GIT_SHORT_SHA=${DEFAULT_DOCKER_IMAGE_VERSION:0:7}
          echo "GIT_SHORT_SHA=${GIT_SHORT_SHA}" >> $GITHUB_ENV
          echo "BRANCH_SHA_TAG=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APP_VERSION=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV

          # For twistcli
          echo "BUILD_JOB_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          # https://stackoverflow.com/questions/60942067/get-current-date-and-time-in-github-workflows/60942437#60942437
          BUILD_DATE_TIME=$(date +'%Y-%m-%d %H:%m:%S %Z')
          echo "BUILD_DATE_TIME=${BUILD_DATE_TIME}" >> $GITHUB_ENV
          JOB_TIMESTAMP=$(date +%s)
          echo "JOB_TIMESTAMP=${JOB_TIMESTAMP}" >> $GITHUB_ENV
          # https://git-scm.com/docs/git-show
          COMMITTER_NAME=$(git --no-pager show -s --format="%an")
          echo "COMMITTER_NAME=${COMMITTER_NAME}" >> $GITHUB_ENV
          COMMITTER_EMAIL=$(git --no-pager show -s --format="%ae")
          echo "COMMITTER_EMAIL=${COMMITTER_EMAIL}" >> $GITHUB_ENV
          env

      - name: Setting values
        id: set_base_values
        run: |
          # The below outputs a JSON array of check tasks for each subproject
          #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
          # https://github.community/t/sharing-a-variable-between-jobs/16967/14
          echo "githubActionJobUrl=$BUILD_JOB_URL" >> $GITHUB_OUTPUT
          echo "githubActionRunId=$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
          echo "defaultDockerImageVersion=$DEFAULT_DOCKER_IMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchTag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchShaTag=$BRANCH_SHA_TAG" >> $GITHUB_OUTPUT
          echo "gitShortSha=$GIT_SHORT_SHA" >> $GITHUB_OUTPUT
          echo "buildDateTime=$BUILD_DATE_TIME" >> $GITHUB_OUTPUT
          echo "jobStartTimestamp=$JOB_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "committerName=$COMMITTER_NAME" >> $GITHUB_OUTPUT
          echo "committerEmail=$COMMITTER_EMAIL" >> $GITHUB_OUTPUT
          echo "githubOrg=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_OUTPUT
          echo "gitopsDeployVersion=$NEXT_PUBLIC_APP_VERSION" >> $GITHUB_OUTPUT

      - name: Generate tokens for building the image
      # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
      # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'branch' }}
        run: |
          TOKEN=$(echo -n "${{secrets.SECENG_DEVSECOPS_CLIENT_PRISMA_USERNAME}}:${{secrets.SECENG_DEVSECOPS_CLIENT_PRISMA_PASSWORD}}" | openssl base64)
          echo "SECENG_DEVSECOPS_CLIENT_TWISTLOCK_TOKEN=${TOKEN}" >> $GITHUB_ENV
          echo "SECENG_DEVSECOPS_CLIENT_TWISTLOCK_TOKEN_TYPE=Basic" >> $GITHUB_ENV

      - name: Find out the image repo name and version
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          env
          # Find out the name of the docker image declared in the docker-compose image section of the default service
          if [ -n "${{ inputs.docker-compose-file }}" ] && [ -f "${{ inputs.docker-compose-file }}" ]; then
            DEFAULT_DOCKER_IMAGE_REPO=$(docker compose -f ${{ inputs.docker-compose-file }} config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          else
            DEFAULT_DOCKER_IMAGE_REPO=$(docker compose config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          fi
          ORIGINAL_DOCKER_IMAGE_TAG=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F":" '{ print $2 }')
          DEFAULT_DOCKER_IMAGE_REPO=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F":" '{ print $1 }')

          echo "DEFAULT_DOCKER_IMAGE_REPO=${DEFAULT_DOCKER_IMAGE_REPO}" >> $GITHUB_ENV
          echo "ORIGINAL_DOCKER_IMAGE_TAG=${ORIGINAL_DOCKER_IMAGE_TAG}" >> $GITHUB_ENV

          # The registry is the first part of the registry/repo/folder
          DEFAULT_DOCKER_REGISTRY=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F "/" '{print $1}')
          echo "DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}" >> $GITHUB_ENV
          # Just break down the paths for links in artifactory
          REGISTRY="${DEFAULT_DOCKER_REGISTRY}/"
          GITHUB_REPOSITORY_PATHS=${DEFAULT_DOCKER_IMAGE_REPO/$REGISTRY/}
          GITHUB_REPOSITORY_PATHS=$(echo ${GITHUB_REPOSITORY_PATHS} | sed -e "s/-/\//g")
          GITHUB_REPOSITORY_PATHS=${GITHUB_REPOSITORY_PATHS/$ORIGINAL_DOCKER_IMAGE_TAG}
          echo "GITHUB_REPOSITORY_PATHS=${GITHUB_REPOSITORY_PATHS}" >> $GITHUB_ENV

          # Extract the first token, repository path, and image tag from the image string
          ARTIFACTORY_REPO_TOKEN="$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | cut -d '.' -f1)"
          ARTIFACTORY_REPO_PATH="$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F: '{print substr($1, index($1,"/")+1)}')"

          # Construct the new artifactory URL
          ARTIFACTORY_URL="https://artifactory.viasat.com/ui/repos/tree/General/${ARTIFACTORY_REPO_TOKEN}/${ARTIFACTORY_REPO_PATH}/${NEXT_PUBLIC_APP_VERSION}"
          echo "ARTIFACTORY_URL=$ARTIFACTORY_URL" >> $GITHUB_ENV

      - id: set_docker_image_settings
        # The below outputs a JSON array of check tasks for each subproject
        #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
        # https://github.community/t/sharing-a-variable-between-jobs/16967/14
        run: |
          env
          if [ -z "${{ inputs.docker-compose-service }}" ] || [ -z "${DEFAULT_DOCKER_IMAGE_REPO}" ] || [ -z "${DEFAULT_DOCKER_REGISTRY}" ]; then
            echo "ERROR: Couldn't define either ${{ inputs.docker-compose-service }}='${{ inputs.docker-compose-service }}' or DEFAULT_DOCKER_IMAGE_REPO='${DEFAULT_DOCKER_IMAGE_REPO} or DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}'. Check the logs!"
            exit 1
          fi
          echo "defaultDockerImageRepo=$DEFAULT_DOCKER_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "defaultDockerService=${{ inputs.docker-compose-service }}" >> $GITHUB_OUTPUT
          echo "defaultDockerRegistry=$DEFAULT_DOCKER_REGISTRY" >> $GITHUB_OUTPUT
          echo "originalDockerImageTag=$ORIGINAL_DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "githubRepoPaths=$GITHUB_REPOSITORY_PATHS" >> $GITHUB_OUTPUT
          echo "dockerImageArtifactoryUrl=$ARTIFACTORY_URL" >> $GITHUB_OUTPUT

  pull:
    name: 🐳 pull
    needs: [code]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
    # Only run the builds when building either DEV or STG
    if: ${{ github.ref_type == 'branch' }}

    strategy:
      # requirement potential onboardings with failures should not break others
      # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#handling-failures
      fail-fast: false

    steps:
      - name: Annotate Job with current information
        run: |
          echo "# 🐳 pull Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# :page_with_curl: Using Metadata " >> $GITHUB_STEP_SUMMARY
          echo "* Registry: ${{ needs.code.outputs.defaultDockerRegistry }}"
          echo "* Image: ${{ needs.code.outputs.defaultDockerImageRepo }}"
          echo "* Tag: ${{ needs.code.outputs.originalDockerImageTag }}"

      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to Artifactory Docker Registry
        uses: seceng-devsecops-platform/docker-login-action@v3.3.0
        with:
          registry: ${{ needs.code.outputs.defaultDockerRegistry }}
          username: ${{ secrets.ARTIFACTORY_SVC_USER }}
          password: ${{ secrets.ARTIFACTORY_SVC_PASS }}

      - name: Wait for built docker image ${{ needs.code.outputs.defaultDockerImageRepo }}:${{ needs.code.outputs.defaultDockerImageBranchShaTag }}
        run: |
          IMAGE=${{ needs.code.outputs.defaultDockerImageRepo }}:${{ needs.code.outputs.defaultDockerImageBranchShaTag }}
          attempt=0
          total=$(( ${{ inputs.seceng-devsecops-prisma-wait-for-build }} / 10 ))
          while ! docker pull $IMAGE; do
            if [ $attempt -gt 0 ]; then
              echo "Image not found, retrying in 10 seconds after $attempt/${total} attempts..."
            fi
            attempt=$((attempt+1))
            if [ $attempt -eq ${total} ]; then
              echo "Image not found after ${total} seconds, exiting..."
              exit 1
            fi
            sleep 10
          done

  prisma:
    name: 🏳️‍🌈⃤  prisma
    needs: [code, pull]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
    # Only run the builds when building either DEV or STG
    if: ${{ github.ref_type == 'branch' && inputs.seceng-devsecops-prisma-project != '' }}

    permissions:
      pull-requests: write # <--- allows to update PRs

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      passedComplianceScan: ${{steps.scan-results-collection.outputs.passedComplianceScan}}
      passedVulnerabilitiesScan: ${{steps.scan-results-collection.outputs.passedVulnerabilitiesScan}}
      scanResultsUrl: ${{steps.scan-results-collection.outputs.scanResultsUrl}}
      scanResultsId: ${{steps.scan-results-collection.outputs.scanResultsId}}
      scanResultsFilename: ${{steps.scan-results-collection.outputs.scanResultsFilename}}
      scanErrorMessage: ${{steps.scan-results-collection.outputs.scan-error-message}}
      scanErrorStatusCode: ${{steps.scan-results-collection.outputs.scan-error-status-code}}

    strategy:
      # requirement potential onboardings with failures should not break others
      # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#handling-failures
      fail-fast: false

    steps:
      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🏳️‍🌈⃤  prisma Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# :page_with_curl: Using Metadata " >> $GITHUB_STEP_SUMMARY

      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to Artifactory Docker Registry
        uses: seceng-devsecops-platform/docker-login-action@v3.3.0
        with:
          registry: ${{ needs.code.outputs.defaultDockerRegistry }}
          username: ${{ secrets.ARTIFACTORY_SVC_USER }}
          password: ${{ secrets.ARTIFACTORY_SVC_PASS }}

      # Run the Twistlock action https://git.viasat.com/seceng-devsecops-platform/devsecops-platform-action-prisma
      - name: Scan Docker Image with Prisma twistcli
        uses: seceng-devsecops-platform/devsecops-client-runtime-twistcli@main
        # To be referring to for results https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action#example-using-a-public-action
        id: prisma_cloud_scan
        continue-on-error: true
        with:
          prisma-cloud-url: https://${{ inputs.seceng-devsecops-prisma-domain }}
          prisma-cloud-project: ${{ inputs.seceng-devsecops-prisma-project }}
          #### TODO: Use vault secrets management
          prisma-cloud-username: ${{secrets.SECENG_DEVSECOPS_CLIENT_PRISMA_USERNAME}}
          prisma-cloud-password: ${{secrets.SECENG_DEVSECOPS_CLIENT_PRISMA_PASSWORD}}
          prisma-cloud-job-name: ${{ github.repository }}
          prisma-cloud-job-url: ${{ needs.code.outputs.githubActionJobUrl }}
          docker-image-tag-to-scan: ${{ needs.code.outputs.defaultDockerImageRepo }}:${{ needs.code.outputs.defaultDockerImageBranchShaTag }}

      # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action/61236803#61236803
      - name: Set outputs for Scan results
        id: scan-results-collection
        run: |
          echo 'scan-outputs=${{ toJSON(steps.prisma_cloud_scan.outputs) }}'
          echo "Scan results URL: ${{ steps.prisma_cloud_scan.outputs.scan-results-url }}"
          echo "Passed Compliance? ${{ steps.prisma_cloud_scan.outputs.passed-compliance-scan }}"
          echo "Passed Vulnerabilities? ${{ steps.prisma_cloud_scan.outputs.passed-vulnerability-scan }}"
          echo "Error Message? ${{ steps.prisma_cloud_scan.outputs.scan-error-message }}"
          echo "Error Status Code? ${{ steps.prisma_cloud_scan.outputs.scan-error-status-code }}"
          echo "Report file: ${{ steps.prisma_cloud_scan.outputs.scan-results-filename }}"

          echo "scanResultsUrl=${{ steps.prisma_cloud_scan.outputs.scan-results-url }}" >> $GITHUB_OUTPUT
          echo "scanResultsId=${{ steps.prisma_cloud_scan.outputs.scan-results-id }}" >> $GITHUB_OUTPUT
          echo "scanResultsFilename=${{ steps.prisma_cloud_scan.outputs.scan-results-filename }}" >> $GITHUB_OUTPUT
          echo "passedComplianceScan=${{ steps.prisma_cloud_scan.outputs.passed-compliance-scan }}" >> $GITHUB_OUTPUT
          echo "passedVulnerabilitiesScan=${{ steps.prisma_cloud_scan.outputs.passed-vulnerability-scan }}" >> $GITHUB_OUTPUT

          echo "scanErrorMessage=${{ steps.prisma_cloud_scan.outputs.scan-error-message }}" >> $GITHUB_OUTPUT
          echo "scanErrorStatusCode=${{ steps.prisma_cloud_scan.outputs.scan-error-status-code }}" >> $GITHUB_OUTPUT

      - name: Scan result outputs
        run: |
          echo 'scan-outputs=${{ toJSON(steps.scan-results-collection.outputs) }}'

      - name: Annotate workflow Summary with current information
        uses: seceng-devsecops-platform/devsecops-platform-github-workflows/actions/docker/prisma-cloud-scan-reporter@main
        id: prisma-cloud-scan-report
        with:
          git-revision: ${{ needs.code.outputs.gitShortSha }}
          docker-image-repo-tag: ${{ needs.code.outputs.defaultDockerImageRepo }}:${{ needs.code.outputs.defaultDockerImageBranchShaTag }}
          docker-image-registry-url: ${{ needs.code.outputs.dockerImageArtifactoryUrl }}
          prisma-cloud-domain: https://${{ inputs.seceng-devsecops-prisma-domain }}
          prisma-cloud-project: ${{ inputs.seceng-devsecops-prisma-project }}
          prisma-cloud-report-file-path: ${{ steps.prisma_cloud_scan.outputs.scan-results-filename }}
          prisma-cloud-scan-results-url: ${{ steps.prisma_cloud_scan.outputs.scan-results-url }}
          prisma-cloud-scan-exit-status-code: ${{ steps.prisma_cloud_scan.outputs.scan-error-status-code }}
          prisma-cloud-scan-errors: ${{ steps.prisma_cloud_scan.outputs.scan-error-message }}

  sbom:
    name: 🛡️ sbom
    needs: [code, pull]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
    # Only run the builds when building either DEV or STG
    if: ${{ github.ref_type == 'branch' }}

    permissions:
      pull-requests: write # <--- allows to update PRs

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      passedComplianceScan: ${{ steps.scan-results-collection.outputs.passedComplianceScan }}

    strategy:
      # requirement potential onboardings with failures should not break others
      # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#handling-failures
      fail-fast: false

    steps:
      - name: Login to Artifactory Docker Registry
        uses: seceng-devsecops-platform/docker-login-action@v3.3.0
        with:
          registry: ${{ needs.code.outputs.defaultDockerRegistry }}
          username: ${{ secrets.ARTIFACTORY_SVC_USER }}
          password: ${{ secrets.ARTIFACTORY_SVC_PASS }}

      - name: Annotate Job with current information with SBOM
        uses: seceng-devsecops-platform/devsecops-platform-github-workflows/actions/docker/sbom-reporter@main
        id: docker-sbom-report
        with:
          git-revision: ${{ needs.code.outputs.gitShortSha }}
          docker-image-repo-tag: ${{ needs.code.outputs.defaultDockerImageRepo }}:${{ needs.code.outputs.defaultDockerImageBranchShaTag }}
          add-comment-to-current-pr: true
