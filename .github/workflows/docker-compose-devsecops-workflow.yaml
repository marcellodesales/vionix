####
#### Author: Marcello DeSales (@mdesales)
####
# Builds and Pushes a Docker Image to Viasat's Artifactory Docker Registry
# https://www.freecodecamp.org/news/a-lightweight-tool-agnostic-ci-cd-flow-with-github-actions/
# Base Workflow: https://git.viasat.com/seceng-devsecops-platform/devsecops-client-runtime-blackduck/blob/master/.github/workflows/devsecops-python.yaml
name: docker-image-devsecops-cicd

# Avoid multiple CI jobs to execute for multiple commits in a given branch
# section #6: Saving Computation Time by Stopping Obsolete Workflows
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  # Manual workflow execution
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  # https://github.com/actions/runner/issues/1483#issuecomment-969295757
  # https://github.com/orgs/community/discussions/25595#discussioncomment-3248417
  workflow_call:
    inputs:
      seceng-devsecops-dind-runner-label:
        description: "Docker-in-docker (dind) runner to use base label"
        required: false
        type: string
        # Base image for the label is at https://git.viasat.com/seceng-devsecops-platform/devsecops-platform-runtime-github_actions_runner
        default: devsecops

      docker-compose-file:
        description: "Docker Compose File to use"
        required: false
        type: string
        default: docker-compose.yaml

      docker-compose-context:
        description: "Directory containing the given docker-compose-file"
        required: false
        type: string
        default: "."

      docker-compose-service:
        description: "Docker Compose service to build"
        required: true
        type: string

      docker-build-platforms:
        description: "The list of docker platforms to build using buildx"
        required: false
        type: string
        default: "linux/amd64"

      docker-build-mode:
        description: "Whether to run in parallel or sequencial with DOCKER_BUILDKIT=0"
        required: false
        type: string
        default: "parallel"

      docker-build-file-path:
        description: "The path to Dockerfile when sequencial is provided"
        required: false
        type: string
        default: Dockerfile

      docker-build-sonarqube-project-id:
        description: "The name of the sonarqube project that should be used when scanning the Dockerfiles"
        required: false
        type: string

      docker-compose-build-envs:
        description: "If there's extra build envs placed to the file specified by this value"
        required: false
        type: string

      docker-submit-sbom:
        description: "Submits the sbom of the docker image to the dependency graph + GHAS"
        required: false
        type: string
        default: "false"

      # There's still a possibility that the image is never built, so this will timeout and fail the execution. Make sure to analize the situation.
      docker-compose-releases-wait-for-build:
        description: "The number of seconds to wait while releasing docker images. Usually it's larger than the average builds of the docker image"
        required: false
        type: number
        default: 400

      gitops-deploy-workflow:
        description: "Cloud provider workflow deploy the repo using k8s"
        required: false
        type: string

      artifactory-deploy-repo-type:
        description: "The type of deployment artifact to use"
        type: string
        required: false

      artifactory-deploy-workflow:
        description: "Deployment of artifactory artifacts based on types"
        type: string
        required: false
        # https://jfrog.com/blog/why-goproxy-matters-and-which-to-pick/
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/work-with-gosumdb
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/advanced-configuration-for-go-repositories
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/local-go-repositories
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/remote-go-repositories
        # https://jfrog.com/help/r/jfrog-artifactory-documentation/virtual-go-repositories
#         default: |
#           {
#             "host": "artifactory.viasat.com/artifactory",
#             "type": "golang",
#             "noSumDb": "git.viasat.com/*",
#             "repo": {
#               "virtual": "project-golang",
#               "local": "project-golang-local"
#             }
#           }

    # We need to declare the intent of secrets. The pipelines reusing this must declare them!
    # https://github.com/orgs/community/discussions/26749#discussioncomment-3253230
    secrets:

      ARTIFACTORY_SVC_USER:
        description: "The username of the service account for Artifactory Docker registry Repository"
        required: true

      ARTIFACTORY_SVC_PASS:
        description: "The password associated with the username of the service account for Artifactory Docker registry Repository"
        required: true

      SLACK_CHANNEL_AUTOMATION_ID:
        description: "The Slack Automation ID"
        required: false

      SLACK_CHANNEL_AUTOMATION_TOKEN:
        description: "The token for the given Slack channel ID"
        required: false

      GITOPS_GITHUB_DEPLOY_PAT:
        description: "The token to clone and push changes to the GitOps Deploy repo"
        required: false

# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:

  code:
    name: 🔧 code
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # Maybe to get twistlock action to run we need permission to read
    # https://github.com/actions/checkout/issues/254#issuecomment-1166945991
    permissions:
      contents: read  # <--- allows to read repo

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      # "set-output" in each of the steps[name].outputs is defined is where these are defined for the job
      githubActionJobName: ${{steps.set_base_values.outputs.githubActionJobName}}
      githubActionJobUrl: ${{steps.set_base_values.outputs.githubActionJobUrl}}
      githubActionRunId: ${{steps.set_base_values.outputs.githubActionRunId}}
      githubOrg: ${{steps.set_base_values.outputs.githubOrg}}
      defaultDockerImageVersion: ${{steps.set_base_values.outputs.defaultDockerImageVersion}}
      defaultDockerImageBranchTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchTag}}
      defaultDockerImageBranchShaTag: ${{steps.set_base_values.outputs.defaultDockerImageBranchShaTag}}
      defaultDockerImageBranchTagForVersion: ${{steps.set_base_values.outputs.defaultDockerImageBranchTagForVersion}}
      dockerContextPath: ${{steps.set_base_values.outputs.dockerContextPath}}
      jobStartTimestamp: ${{steps.set_base_values.outputs.jobStartTimestamp}}
      gitShortSha: ${{steps.set_base_values.outputs.gitShortSha}}
      committerName: ${{steps.set_base_values.outputs.committerName}}
      committerEmail: ${{steps.set_base_values.outputs.committerEmail}}
      buildDateTime: ${{steps.set_base_values.outputs.buildDateTime}}
      gitopsDeployEnv: ${{steps.set_base_values.outputs.gitopsDeployEnv}}
      gitopsDeployUrl: ${{steps.set_base_values.outputs.gitopsDeployUrl}}
      gitopsDeploySegment: ${{steps.set_base_values.outputs.gitopsDeploySegment}}
      gitopsDeployTargetRepo: ${{steps.set_base_values.outputs.gitopsDeployTargetRepo}}
      gitopsDeployTargetRepoBranch: ${{steps.set_base_values.outputs.gitopsDeployTargetRepoBranch}}
      gitopsDeployTargetProvider: ${{steps.set_base_values.outputs.gitopsDeployTargetProvider}}
      gitopsDeployTargetRegion: ${{steps.set_base_values.outputs.gitopsDeployTargetRegion}}
      gitopsDeployTargetType: ${{steps.set_base_values.outputs.gitopsDeployTargetType}}
      gitopsDeployTargetKey: ${{ steps.set_base_values.outputs.gitopsDeployTargetKey }}
      gitopsDeployVersion: ${{steps.set_base_values.outputs.gitopsDeployVersion}}
      slackMessageId: ${{steps.slack.outputs.message_id}}

    steps:
      - name: Provided input to the app
        run: |
          echo "Inputs=${{ toJSON(inputs) }}"
          echo "Secrets=${{ toJSON(secrets) }}"

      - name: Fetch all history and have .git locally for inspection
        uses: viarise/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🔧 code Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :recycle: Needs refactoring" >> $GITHUB_STEP_SUMMARY
          echo "* Installed latest git to self-hosted to be able to see the .git metadata dir " >> $GITHUB_STEP_SUMMARY
          echo "  * https://github.com/actions/checkout/issues/335#issuecomment-763159788 " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # Write directly to GITHUB_ENV so that all steps have access to the same values
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#passing-values-between-steps-and-jobs-in-a-workflow
      - name: Set default commit sha for TAG push
        if: github.ref_type == 'tag'
        run: |
          echo "Retrieving the last commit before the merge, which is the top of the develop branch"
          git --no-pager log --format="%h %B" --oneline -n 5
          BEFORE_MERGE_SHA=$(git --no-pager rev-list HEAD^1..HEAD --max-parents=1 --max-count=1)
          echo "DEFAULT_DOCKER_IMAGE_VERSION=${BEFORE_MERGE_SHA}" >> $GITHUB_ENV

      # Write directly to GITHUB_ENV so that all steps have access to the same values
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#passing-values-between-steps-and-jobs-in-a-workflow
      - name: Set default SHA from for tags
        if: github.ref_type != 'tag'
        run: |
          echo "DEFAULT_DOCKER_IMAGE_VERSION=${GITHUB_SHA}" >> $GITHUB_ENV

      # Write directly to GITHUB_ENV so that all steps have access to the same values
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables#passing-values-between-steps-and-jobs-in-a-workflow
      - name: Set default envs for for versioning
        run: |
          # The repo name only without refs
          # https://stackoverflow.com/questions/13570327/how-to-delete-a-substring-using-shell-script/46104342#46104342
          REMOVE="refs/heads/"
          BRANCH_TAG=${GITHUB_REF/$REMOVE/}

          REMOVE="refs/tags/"
          BRANCH_TAG=${BRANCH_TAG/$REMOVE/}

          echo "BRANCH_TAG=${BRANCH_TAG}" >> $GITHUB_ENV
          # Remove the / from topic branches for versions, etc:
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG} | sed -e 's/\//-/g')
          BRANCH_TAG_FOR_VERSION=$(echo ${BRANCH_TAG_FOR_VERSION} | sed -e 's/#/-/g')
          echo "BRANCH_TAG_FOR_VERSION=${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # The branch and sha together makes it easier to find
          GIT_SHORT_SHA=${GITHUB_SHA:0:7}
          echo "GIT_SHORT_SHA=${GIT_SHORT_SHA}" >> $GITHUB_ENV
          echo "BRANCH_SHA_TAG=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APP_VERSION=${GIT_SHORT_SHA}-${BRANCH_TAG_FOR_VERSION}" >> $GITHUB_ENV
          # For twistcli
          echo "BUILD_JOB_NAME=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "BUILD_JOB_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          # https://stackoverflow.com/questions/60942067/get-current-date-and-time-in-github-workflows/60942437#60942437
          BUILD_DATE_TIME=$(date +'%Y-%m-%d %H:%m:%S %Z')
          echo "BUILD_DATE_TIME=${BUILD_DATE_TIME}" >> $GITHUB_ENV
          JOB_TIMESTAMP=$(date +%s)
          echo "JOB_TIMESTAMP=${JOB_TIMESTAMP}" >> $GITHUB_ENV
          # https://git-scm.com/docs/git-show
          COMMITTER_NAME=$(git --no-pager show -s --format="%an")
          echo "COMMITTER_NAME=${COMMITTER_NAME}" >> $GITHUB_ENV
          COMMITTER_EMAIL=$(git --no-pager show -s --format="%ae")
          echo "COMMITTER_EMAIL=${COMMITTER_EMAIL}" >> $GITHUB_ENV

          env

      # Override the version with the tag name since it's available on github.ref_name
      - name: Set version as Tag=${{ github.ref_name }} as it is a production release
        if: github.ref_type == 'tag'
        run: |
          echo "NEXT_PUBLIC_APP_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      # only setup deployment when the deployment object is provided
      - name: Setup default deployment properties for all releases
        if: ${{ inputs.gitops-deploy-workflow != '' }}
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          GITOPS_WORKFLOW='${{ inputs.gitops-deploy-workflow }}'
          echo "deploy_workflow='${GITOPS_WORKFLOW}'"

          GITOPS_TARGET_REPO=$(echo ${GITOPS_WORKFLOW} | jq -r '.target.repo')
          GITOPS_TARGET_REPO_BRANCH=$(echo ${GITOPS_WORKFLOW} | jq -r '.target.ref')
          echo "GITOPS_TARGET_REPO=${GITOPS_TARGET_REPO}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_REPO_BRANCH=${GITOPS_TARGET_REPO_BRANCH}" >> $GITHUB_ENV

          echo "Target repo: ${GITOPS_TARGET_REPO} for the target branch: ${GITOPS_TARGET_REPO_BRANCH}"

          if echo ${GITOPS_WORKFLOW} | jq '. | has("cluster")' > /dev/null; then
            echo "The workflow is for kubernetes deployments with a k8s cluster defined"
            echo ${GITOPS_WORKFLOW} | jq '.cluster'

            GITOPS_TARGET_REGION=$(echo ${GITOPS_WORKFLOW} | jq -r '.cluster.region')
            GITOPS_TARGET_TYPE=$(echo ${GITOPS_WORKFLOW} | jq -r '.cluster.type')
            GITOPS_TARGET_PROVIDER=$(echo ${GITOPS_WORKFLOW} | jq -r '.cluster.provider')

            echo "GITOPS_TARGET_PROVIDER=${GITOPS_TARGET_PROVIDER}" >> $GITHUB_ENV
            echo "GITOPS_TARGET_REGION=${GITOPS_TARGET_REGION}" >> $GITHUB_ENV
            echo "GITOPS_TARGET_TYPE=${GITOPS_TARGET_TYPE}" >> $GITHUB_ENV
          fi

          if [ -f action.yaml ]; then
            GITOPS_TARGET_TYPE=$(echo ${GITOPS_WORKFLOW} | jq -r '.target.type')
            echo "GITOPS_TARGET_TYPE=${GITOPS_TARGET_TYPE}" >> $GITHUB_ENV

            GITOPS_TARGET_KEY=$(echo ${GITOPS_WORKFLOW} | jq -r '.target.key')
            echo "GITOPS_TARGET_KEY=${GITOPS_TARGET_KEY}" >> $GITHUB_ENV
          fi

      # Execute for DEV and STG
      - name: Setup deployment properties for branch
        if: ${{ inputs.gitops-deploy-workflow != '' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') }}
        run: |
          GITOPS_WORKFLOW='${{ inputs.gitops-deploy-workflow }}'
          echo "deploy_workflow=${GITOPS_WORKFLOW}"

          GITOPS_TARGET_ENV=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs[$branch].env')
          GITOPS_TARGET_SEGMENT=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs[$branch].segment')
          GITOPS_TARGET_URL=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs[$branch].url')

          echo "GITOPS_TARGET_ENV=${GITOPS_TARGET_ENV}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_SEGMENT=${GITOPS_TARGET_SEGMENT}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_URL=${GITOPS_TARGET_URL}" >> $GITHUB_ENV

      # Execute for the PRD TAGs
      - name: Setup deployment properties for tag
        if: ${{ inputs.gitops-deploy-workflow != '' && github.ref_type == 'tag' }}
        run: |
          GITOPS_WORKFLOW='${{ inputs.gitops-deploy-workflow }}'
          echo "deploy_workflow=${GITOPS_WORKFLOW}"

          GITOPS_TARGET_ENV=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs.tag.env')
          GITOPS_TARGET_SEGMENT=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs.tag.segment')
          GITOPS_TARGET_URL=$(echo ${GITOPS_WORKFLOW} | jq -r --arg branch ${GITHUB_REF_NAME} '.envs.tag.url')

          echo "GITOPS_TARGET_ENV=${GITOPS_TARGET_ENV}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_SEGMENT=${GITOPS_TARGET_SEGMENT}" >> $GITHUB_ENV
          echo "GITOPS_TARGET_URL=${GITOPS_TARGET_URL}" >> $GITHUB_ENV

      - name: Setting values
        id: set_base_values
        run: |
          # The below outputs a JSON array of check tasks for each subproject
          #  and uses GitHub Actions magic (::set-output) to set an output
          #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
          # https://github.community/t/sharing-a-variable-between-jobs/16967/14
          echo "githubActionJobName=$BUILD_JOB_NAME" >> $GITHUB_OUTPUT
          echo "githubActionJobUrl=$BUILD_JOB_URL" >> $GITHUB_OUTPUT
          echo "githubActionRunId=$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
          echo "dockerContextPath=${{ inputs.docker-compose-context }}" >> $GITHUB_OUTPUT
          echo "defaultDockerImageVersion=$DEFAULT_DOCKER_IMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchTag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchTagForVersion=$BRANCH_TAG_FOR_VERSION" >> $GITHUB_OUTPUT
          echo "defaultDockerImageBranchShaTag=$BRANCH_SHA_TAG" >> $GITHUB_OUTPUT
          echo "gitShortSha=$GIT_SHORT_SHA" >> $GITHUB_OUTPUT
          echo "buildDateTime=$BUILD_DATE_TIME" >> $GITHUB_OUTPUT
          echo "jobStartTimestamp=$JOB_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "committerName=$COMMITTER_NAME" >> $GITHUB_OUTPUT
          echo "committerEmail=$COMMITTER_EMAIL" >> $GITHUB_OUTPUT
          echo "githubOrg=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_OUTPUT

          echo "gitopsDeployEnv=$GITOPS_TARGET_ENV" >> $GITHUB_OUTPUT
          echo "gitopsDeployUrl=$GITOPS_TARGET_URL" >> $GITHUB_OUTPUT
          echo "gitopsDeploySegment=$GITOPS_TARGET_SEGMENT" >> $GITHUB_OUTPUT
          echo "gitopsDeployTargetRepo=$GITOPS_TARGET_REPO" >> $GITHUB_OUTPUT
          echo "gitopsDeployTargetRepoBranch=$GITOPS_TARGET_REPO_BRANCH" >> $GITHUB_OUTPUT
          echo "gitopsDeployTargetProvider=$GITOPS_TARGET_PROVIDER" >> $GITHUB_OUTPUT
          echo "gitopsDeployTargetRegion=$GITOPS_TARGET_REGION" >> $GITHUB_OUTPUT
          echo "gitopsDeployTargetType=$GITOPS_TARGET_TYPE" >> $GITHUB_OUTPUT
          echo "gitopsDeployTargetKey=$GITOPS_TARGET_KEY" >> $GITHUB_OUTPUT
          echo "gitopsDeployVersion=$NEXT_PUBLIC_APP_VERSION" >> $GITHUB_OUTPUT

      # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
      - name: Annotate Job with current information
        if: ${{ inputs.gitops-deploy-workflow != '' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref_type == 'tag') }}
        run: |
          echo "```json" >> $GITHUB_STEP_SUMMARY
          for JSON_LINE in "${{ toJSON(steps.set_base_values.outputs) }}"; do
            echo "${JSON_LINE}" >> $GITHUB_STEP_SUMMARY
          done
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "## :page_facing_up: Metadata output" >> $GITHUB_STEP_SUMMARY

          echo "# :building_construction: Deployment Plan" >> $GITHUB_STEP_SUMMARY
          echo "* :octocat: Deploy repo: ${GITOPS_TARGET_REPO}" >> $GITHUB_STEP_SUMMARY
          echo "* :herb: Deploy repo branch: ${GITOPS_TARGET_REPO_BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "* :cloud: Provider: ${GITOPS_TARGET_PROVIDER}" >> $GITHUB_STEP_SUMMARY
          echo "* :world_map: Region: ${GITOPS_TARGET_REGION}" >> $GITHUB_STEP_SUMMARY
          echo "* :compass: Segment: ${GITOPS_TARGET_SEGMENT}" >> $GITHUB_STEP_SUMMARY
          echo "* :ice_cube: Type: ${GITOPS_TARGET_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "* :canoe: Env: ${GITOPS_TARGET_ENV}" >> $GITHUB_STEP_SUMMARY
          echo "* :link: Env Url: ${GITOPS_TARGET_URL}" >> $GITHUB_STEP_SUMMARY

      - name: Add app version to summary for branches
        if: ${{ inputs.gitops-deploy-workflow != '' && github.ref_type == 'branch' }}
        run: |
          echo "* :bookmark: App Version: ${NEXT_PUBLIC_APP_VERSION}" >> $GITHUB_STEP_SUMMARY

      # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
      - name: Add app version to summary for tags
        if: ${{ inputs.gitops-deploy-workflow != '' && github.ref_type == 'tag' }}
        run: |
          echo "* :bookmark: App Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action/70900405#70900405
      - name: Slack Notification of Starting Container DevSecOps of https://git.viasat.com/${{ github.repository }}@${{github.sha}}#${{steps.set_base_values.outputs.githubActionRunId}}
        #if: ${{ secrets.SLACK_CHANNEL_AUTOMATION_ID != '' && secrets.SLACK_CHANNEL_AUTOMATION_TOKEN != '' }}
        id: slack # IMPORTANT: Reference this step ID value in future Slack steps.
        uses: seceng-devsecops-platform/wearerequired-slack-messaging-action@v3.0.0
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref_type == 'tag' }}
        with:
          bot_token: ${{ secrets.SLACK_CHANNEL_AUTOMATION_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_AUTOMATION_ID }}
          payload: >-
            {
                "text": "🐳 Container Pipeline started to build, check, and publish a container image at \n <https://git.viasat.com/${{ github.repository }}|${{ github.repository }}> :moving-clock:",
                "attachments": [
                    {
                        "color": "#B6B6B6",
                        "fields": [
                            {
                              "title": "#️⃣ Revision",
                              "value": "<https://git.viasat.com/${{ github.repository }}/commit/${{steps.set_base_values.outputs.gitShortSha}}|${{steps.set_base_values.outputs.gitShortSha}}>",
                              "short": true
                            },
                            {
                              "title": "🌿 Branch",
                              "value": "<https://git.viasat.com/${{ github.repository }}/tree/${{steps.set_base_values.outputs.defaultDockerImageBranchTag}}|${{steps.set_base_values.outputs.defaultDockerImageBranchTag}}>",
                              "short": true
                            },
                            {
                              "title": "👤 Author",
                              "value": "<${{ github.event.sender.html_url }}|${{steps.set_base_values.outputs.committerName}}, ${{steps.set_base_values.outputs.committerEmail}}>",
                              "short": true
                            },
                            {
                              "title": "🔧 code Job",
                              "value": "<https://git.viasat.com/${{ github.repository }}/actions/runs/${{github.run_id}}|${{github.run_id}}>",
                              "short": true
                            }
                        ],
                        "footer": "<${{steps.set_base_values.outputs.githubActionJobUrl}}>"
                    }
                ]
            }

      - name: Annotate Job with notification status
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :loudspeaker: notify" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo * Successfully notified Slack Channel >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  check:
    name: 🛡️ check-code
    needs: [code]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    strategy:
      fail-fast: false
      matrix:
        checkType: [Dockerfile,Readme]

    # https://stackoverflow.com/questions/58139175/running-actions-in-another-directory/63122434#63122434
    defaults:
      run:
        working-directory: ${{ inputs.docker-compose-context }}

    steps:
      # Checkout always fetches the whole repo. Depending on the size, this will be super long
      - name: Fetch only the top commit
        if: ${{ github.ref_type == 'branch' }}
        uses: viarise/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Annotate Job with current information
        if: ${{ github.ref_type == 'branch' }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🛡️ check-code Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check Readme
        if: ${{ github.ref_type == 'branch' && matrix.checkType == 'Readme' }}
        run: |
          env
          echo "In order to associate the docker image to the repo, we need to associate the Dockerfile to the repo"
          ls -la

  build:
    name: 📦 build
    needs: [code, check]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://stackoverflow.com/questions/58139175/running-actions-in-another-directory/63122434#63122434
    defaults:
      run:
        working-directory: ${{ inputs.docker-compose-context }}

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      defaultDockerRegistry: ${{steps.set_docker_image_settings.outputs.defaultDockerRegistry}}
      defaultDockerImageRepo: ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}
      defaultDockerService: ${{steps.set_docker_image_settings.outputs.defaultDockerService}}
      originalDockerImageTag: ${{steps.set_docker_image_settings.outputs.originalDockerImageTag}}
      githubRepoPaths: ${{steps.set_docker_image_settings.outputs.githubRepoPaths}}
      dockerImageArtifactoryUrl: ${{steps.set_docker_image_settings.outputs.dockerImageArtifactoryUrl}}

    steps:
      # Checkout always fetches the whole repo. Depending on the size, this will be super long
      - name: Fetch only the top commit
        uses: viarise/checkout@v4.2.0
        with:
          fetch-depth: 1

      - name: Annotate Job with current information
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 📦 build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "NEXT_PUBLIC_APP_VERSION=${{needs.code.outputs.gitopsDeployVersion}}" >> $GITHUB_ENV

      - name: Find out the image repo name and version
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          env
          # Find out the name of the docker image declared in the docker-compose image section of the default service
          if [ -n "${{ inputs.docker-compose-file }}" ] && [ -f "${{ inputs.docker-compose-file }}" ]; then
            DEFAULT_DOCKER_IMAGE_REPO=$(docker compose -f ${{ inputs.docker-compose-file }} config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          else
            DEFAULT_DOCKER_IMAGE_REPO=$(docker compose config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          fi
          ORIGINAL_DOCKER_IMAGE_TAG=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F":" '{ print $2 }')
          DEFAULT_DOCKER_IMAGE_REPO=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F":" '{ print $1 }')

          echo "DEFAULT_DOCKER_IMAGE_REPO=${DEFAULT_DOCKER_IMAGE_REPO}" >> $GITHUB_ENV
          echo "ORIGINAL_DOCKER_IMAGE_TAG=${ORIGINAL_DOCKER_IMAGE_TAG}" >> $GITHUB_ENV

          # The registry is the first part of the registry/repo/folder
          DEFAULT_DOCKER_REGISTRY=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F "/" '{print $1}')
          echo "DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}" >> $GITHUB_ENV
          # Just break down the paths for links in artifactory
          REGISTRY="${DEFAULT_DOCKER_REGISTRY}/"
          GITHUB_REPOSITORY_PATHS=${DEFAULT_DOCKER_IMAGE_REPO/$REGISTRY/}
          GITHUB_REPOSITORY_PATHS=$(echo ${GITHUB_REPOSITORY_PATHS} | sed -e "s/-/\//g")
          GITHUB_REPOSITORY_PATHS=${GITHUB_REPOSITORY_PATHS/$ORIGINAL_DOCKER_IMAGE_TAG}
          echo "GITHUB_REPOSITORY_PATHS=${GITHUB_REPOSITORY_PATHS}" >> $GITHUB_ENV

          # Extract the first token, repository path, and image tag from the image string
          ARTIFACTORY_REPO_TOKEN="$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | cut -d '.' -f1)"
          ARTIFACTORY_REPO_PATH="$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F: '{print substr($1, index($1,"/")+1)}')"

          # Construct the new artifactory URL
          ARTIFACTORY_URL="https://artifactory.viasat.com/ui/repos/tree/General/${ARTIFACTORY_REPO_TOKEN}/${ARTIFACTORY_REPO_PATH}/${{needs.code.outputs.gitopsDeployVersion}}"
          echo "ARTIFACTORY_URL=$ARTIFACTORY_URL" >> $GITHUB_ENV

      - id: set_docker_image_settings
        run: |
          env
          if [ -z "${{ inputs.docker-compose-service }}" ] || [ -z "${DEFAULT_DOCKER_IMAGE_REPO}" ] || [ -z "${DEFAULT_DOCKER_REGISTRY}" ]; then
            echo "ERROR: Couldn't define either ${{ inputs.docker-compose-service }}='${{ inputs.docker-compose-service }}' or DEFAULT_DOCKER_IMAGE_REPO='${DEFAULT_DOCKER_IMAGE_REPO} or DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}'. Check the logs!"
            exit 1
          fi
          echo "defaultDockerImageRepo=$DEFAULT_DOCKER_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "defaultDockerService=${{ inputs.docker-compose-service }}" >> $GITHUB_OUTPUT
          echo "defaultDockerRegistry=$DEFAULT_DOCKER_REGISTRY" >> $GITHUB_OUTPUT
          echo "originalDockerImageTag=$ORIGINAL_DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "githubRepoPaths=$GITHUB_REPOSITORY_PATHS" >> $GITHUB_OUTPUT
          echo "dockerImageArtifactoryUrl=$ARTIFACTORY_URL" >> $GITHUB_OUTPUT

      - name: Set additional envs to docker compose build execution
        if: ${{ inputs.artifactory-deploy-workflow != '' && inputs.artifactory-deploy-repo-type != '' }}
        run: |
          echo "Parsing the artifactory deployment types '${{ inputs.artifactory-deploy-repo-type }}'"
          obj=$(echo '${{ inputs.artifactory-deploy-workflow }}' | jq '.')
          host=$(echo $obj | jq -r '.host')
          type=$(echo $obj | jq -r '.type')
          selected_repo=$(echo $obj | jq -r --arg deployRepoType "${{ inputs.artifactory-deploy-repo-type }}" '.repo[$deployRepoType]')
          noSumDb=$(echo $obj | jq -r '.noSumDb')

          if [ "$type" = "golang" ] && [ "${{ inputs.artifactory-deploy-repo-type }}" = "virtual" ]; then
            goproxy="https://${{ secrets.ARTIFACTORY_SVC_USER }}:${{ secrets.ARTIFACTORY_SVC_PASS }}@$host/$selected_repo"
            echo "Setting env var GOPROXY=$goproxy"
            echo "Setting env var GONOSUMDB=$noSumDb"
            echo "GOPROXY=$goproxy" >> $GITHUB_ENV
            echo "GONOSUMDB=$noSumDb" >> $GITHUB_ENV
          fi

      # Load the docker image built in previous job, which was uploaded to artifacts
      # https://github.com/docker/build-push-action/issues/225#issuecomment-727639184
      - name: Download extra build envs for the execution
        if: ${{ inputs.docker-compose-build-envs != '' }}
        uses: seceng-devsecops-platform/actions-download-artifact@v4
        with:
          name: ${{ inputs.docker-compose-build-envs }}
          path: ${{ inputs.docker-compose-context }}

      - name: Decode extra build env variables for the build from ${{ inputs.docker-compose-context }}
        if: ${{ inputs.docker-compose-build-envs != '' }}
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          ls -la
          echo "Encoded extra build envs"
          cat ${{ inputs.docker-compose-build-envs }}

          echo "Decoding extra build envs..."
          cat ${{ inputs.docker-compose-build-envs }} | base64 -d > tmp.env
          mv tmp.env ${{ inputs.docker-compose-build-envs }}

          echo "Decoded extra build envs"
          cat ${{ inputs.docker-compose-build-envs }}

          if [ -f .env ]; then
            echo "Consolidating extrac build env vars with existing .env"
            cat .env
          fi

          cat ${{ inputs.docker-compose-build-envs }} >> .env
          echo "Final build env vars"
          ls -la
          cat .env

      - name: Review Env Vars
        run: |
          echo "Current env with parsed values"
          env

      - name: Annotate Job with current information
        run: |
          echo 'build-outputs=${{ toJSON(steps.set_docker_image_settings.outputs) }}'
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :page_facing_up: Metadata output" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY
#          echo "```json" >> $GITHUB_STEP_SUMMARY
#          echo "```" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY

      # Newer buildx setting:
      # https://github.com/docker/setup-buildx-action/issues/105#issuecomment-910928571
      # https://github.com/docker/buildx/issues/413#issuecomment-710656847
      - name: Set up Docker Context for Buildx
        # github.ref_type == 'branch' &&
        if: ${{ inputs.docker-build-mode == 'parallel' }}
        id: buildx-context
        run: |
          docker context create builders-context

      # https://github.community/t/use-docker-layer-caching-with-docker-compose-build-not-just-docker/156049/3
      # https://github.com/docker/build-push-action/blob/master/docs/advanced/export-docker.md
      # https://mmeendez8.github.io/2021/07/19/new-docker-cache-is-out.html
      - name: Set up Docker Buildx
        id: buildx
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        # github.ref_type == 'branch' &&
        if: ${{ inputs.docker-build-mode == 'parallel' }}
        uses: seceng-devsecops-platform/docker-setup-buildx-action@v3.8.0
        with:
          endpoint: builders-context

      - name: Annotate Job with current information
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        # if: ${{ github.ref_type == 'branch' }}
        run: |
          echo 'build-outputs=${{ toJSON(steps.buildx.outputs) }}'
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "## :whale: Docker Metadata" >> $GITHUB_STEP_SUMMARY
          echo "* Version: NEXT_PUBLIC_APP_VERSION=${{needs.code.outputs.gitopsDeployVersion}}" >> $GITHUB_STEP_SUMMARY
      #          echo "" >> $GITHUB_STEP_SUMMARY
#          echo "```json" >> $GITHUB_STEP_SUMMARY
#          echo 'outputs=${{ toJSON(steps.buildx.outputs) }}' >> $GITHUB_STEP_SUMMARY
#          echo "```" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY

      # https://docs.github.com/en/packages/learn-github-packages/connecting-a-repository-to-a-package
      # https://github.community/t/github-container-registry-ghcr-io-packages-not-appearing-in-webinterface/130077
      # Manually make the image public by going to the module's settings, Danger Zone
      - name: Set Docker Buildx properties
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        # github.ref_type == 'branch' &&
        if: ${{ inputs.docker-build-mode == 'parallel' }}
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          tree
          # https://github.com/opencontainers/image-spec/blob/main/annotations.md
          LABEL_VALUE=https://git.viasat.com/${GITHUB_REPOSITORY}/tree/${{needs.code.outputs.defaultDockerImageBranchTag}}/${{ inputs.docker-compose-context }}
          DECLARED_DOCKERFILE=$(docker compose config --format json | jq -r --arg SERVICE_NAME "${{ inputs.docker-compose-service }}" '.services[$SERVICE_NAME].build.dockerfile')
          echo "Adding labels to the configured Dockerfile file at '${DECLARED_DOCKERFILE}'"
          echo "LABEL org.opencontainers.image.source ${LABEL_VALUE}" >> ${DECLARED_DOCKERFILE}
          echo "LABEL org.opencontainers.image.created ${{needs.code.outputs.buildDateTime}}" >> ${DECLARED_DOCKERFILE}
          echo "LABEL org.opencontainers.image.version ${GITHUB_SHA}" >> ${DECLARED_DOCKERFILE}

          echo "Using Version: NEXT_PUBLIC_APP_VERSION=${{ needs.code.outputs.gitopsDeployVersion }}"
          if [ -n "${{ inputs.docker-compose-file }}" ] && [ -f "${{ inputs.docker-compose-file}}" ]; then
            echo "Specifying the buildx bake by the service compose file."
            docker compose -f ${{ inputs.docker-compose-file }} config ${{ inputs.docker-compose-service }};
            docker buildx bake -f ${{ inputs.docker-compose-file }} ${{ inputs.docker-compose-service }} --print;
          else
            docker compose config ${{ inputs.docker-compose-service }}
            docker buildx bake ${{ inputs.docker-compose-service }} --print
          fi

      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to Artifactory Docker Registry
        # if: ${{ github.ref_type == 'branch' }}
        uses: seceng-devsecops-platform/docker-login-action@v3.3.0
        with:
          registry: ${{ env.DEFAULT_DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_SVC_USER }}
          password: ${{ secrets.ARTIFACTORY_SVC_PASS }}

      - name: Annotate Job with current information
        # if: ${{ github.ref_type == 'branch' }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "* Logged to ${{ env.DEFAULT_DOCKER_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # TODO: since we are using self-hosted, the docker image is saved in the same host
      # https://docs.docker.com/engine/reference/commandline/buildx_bake/
      - name: Build Docker Image in Parallel mode using bake
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        # github.ref_type == 'branch' &&
        if: ${{ inputs.docker-build-mode == 'parallel' }}
        id: docker-bake
        uses: seceng-devsecops-platform/docker-bake-action@v5.11.0
        with:
          push: true
          # https://github.com/docker/bake-action/pull/76
          workdir: ./${{ inputs.docker-compose-context }}
          targets: ${{steps.set_docker_image_settings.outputs.defaultDockerService}}
          builder: ${{ steps.buildx.outputs.name }}
          files: ./${{ inputs.docker-compose-file }}
          # Builds a docker image and create multiple tags based on the tags below for the ${{ inputs.docker-compose-service }} in docker-compose
          # All the properties from https://github.com/docker/buildx/blob/master/docs/reference/buildx_bake.md#set
          # https://github.community/t/use-docker-layer-caching-with-docker-compose-build-not-just-docker/156049/3
          # https://stackoverflow.com/questions/55756372/when-using-buildkit-with-docker-how-do-i-see-the-output-of-run-commands/55759337#55759337
          # https://github.com/docker/buildx/blob/master/docs/reference/buildx_bake.md#set
          # https://github.com/docker/buildx/issues/872#issuecomment-1014891886
          # # ${{steps.set-docker-image-settings.outputs.defaultDockerService}} could be used in addition to ${{ inputs.docker-compose-service }}
          # Adding gha cache for GHE 3.8+ https://docs.docker.com/build/cache/backends/gha/#using-dockerbuild-push-action: This fails with
          #    the followinghttps://gist.git.viasat.com/mdesales/9868f314c971eead6aae5c2b85539eaa
          set: |
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.tags=${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.cache-from=type=registry,ref=${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:gha-cache
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.cache-to=type=registry,mode=max,ref=${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:gha-cache
            ${{steps.set_docker_image_settings.outputs.defaultDockerService}}.platform=${{ inputs.docker-build-platforms }}

      - name: Push additional tags for this build ${{ inputs.docker-build-mode }}
        # github.ref_type == 'branch' &&
        if: ${{ inputs.docker-build-mode == 'parallel' }}
        run: |
          docker image ls -a
          docker pull ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
          docker tag ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}} ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchShaTag}} 
          docker push ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchShaTag}}

      # TODO: since we are using self-hosted, the docker image is saved in the same host
      # https://docs.docker.com/engine/reference/commandline/buildx_bake/
      - name: Build Docker Image in mode ${{ inputs.docker-build-mode }}
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ inputs.docker-build-mode != 'parallel' }}
        id: docker-compose
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          DOCKER_BUILDKIT=0 docker compose -f ${{ inputs.docker-compose-file }} build

          docker tag ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}} ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchShaTag}}
          docker push ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchShaTag}}

          docker tag ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}} ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
          docker push ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}

      - name: Annotate worflow summary with SBOM reports
        uses: seceng-devsecops-platform/devsecops-platform-github-workflows/actions/docker/sbom-reporter@main
        if: ${{ inputs.docker-submit-sbom == 'true' }}
        with:
          git-revision: ${{ needs.code.outputs.gitShortSha }}
          docker-image-repo-tag: ${{steps.set_docker_image_settings.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}

  deploy:
    name: 🚀 deploy
    # https://stackoverflow.com/questions/63148639/create-dependencies-between-jobs-in-github-actions/63148947#63148947
    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    needs: [code, build]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    if: ${{ github.ref_name == github.event.repository.default_branch || github.ref_name == 'develop' || github.ref_type == 'tag' }}

#    # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
#    environment:
#      name: artifactory-${{ needs.code.outputs.gitopsDeployEnv }}
#      url: ${{needs.build.outputs.dockerImageArtifactoryUrl}}

    # Add permissions to the score of the security events
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
    permissions:
      contents: read  # <--- allows to read repo
      security-events: read

    steps:
      # Checkout always fetches the whole repo. Depending on the size, this will be super long
      - name: Fetch only the top commit
        uses: viarise/checkout@v4.2.0
        with:
          fetch-depth: 1

      - name: Annotate Job with current information for DEV and STG
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "# 🚀 deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          env
          # Find out the name of the docker image declared in the docker-compose image section of the default service
          if [ -n "${{ inputs.docker-compose-file }}" ] && [ -f "${{ inputs.docker-compose-file }}" ]; then
            DEFAULT_DOCKER_IMAGE_REPO=$(docker compose -f ${{ inputs.docker-compose-file }} config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          else
            DEFAULT_DOCKER_IMAGE_REPO=$(docker compose config | yq e . - -o json | jq -r --arg service ${{ inputs.docker-compose-service }} '.services[$service].image');
          fi
          echo "DEFAULT_DOCKER_IMAGE_REPO=${DEFAULT_DOCKER_IMAGE_REPO}" >> $GITHUB_ENV
          ORIGINAL_DOCKER_IMAGE_TAG=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F":" '{ print $2 }')
          echo "ORIGINAL_DOCKER_IMAGE_TAG=${ORIGINAL_DOCKER_IMAGE_TAG}" >> $GITHUB_ENV
          # The registry is the first part of the registry/repo/folder
          DEFAULT_DOCKER_REGISTRY=$(echo ${DEFAULT_DOCKER_IMAGE_REPO} | awk -F "/" '{print $1}')
          echo "DEFAULT_DOCKER_REGISTRY=${DEFAULT_DOCKER_REGISTRY}" >> $GITHUB_ENV

      - name: Annotate Job with current information for PRD
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'tag' || github.ref_name == github.event.repository.default_branch }}
        run: |
          echo "ORIGINAL_DOCKER_IMAGE_TAG=${{ needs.code.outputs.gitopsDeployVersion }}" >> $GITHUB_ENV

      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to Artifactory Docker Registry
        uses: seceng-devsecops-platform/docker-login-action@v3.3.0
        with:
          registry: ${{ env.DEFAULT_DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_SVC_USER }}
          password: ${{ secrets.ARTIFACTORY_SVC_PASS }}

      - name: Pull built docker-image for non-tag execution
        # When building in a branch, the image is likely to be already present as soon as this executes
        # if: ${{ github.ref_type == 'branch' }}
        run: |
          docker pull ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
          echo "Current images"
          docker image ls -a

      # TODO: Since the current running is self-hosted, we can just run the command again and reuse
      # the docker images from cache. When we change, we need to use the transfer of images
      # https://github.com/docker/build-push-action/blob/master/docs/advanced/share-image-jobs.md
      # https://docs.docker.com/engine/reference/commandline/buildx_bake/
      - name: Push Docker Images tags built before for DEV and STG
        #if: ${{ github.ref_type == 'branch' }}
        run: |
          docker tag ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}} ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchTagForVersion}}
          docker push ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}

          docker tag ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}} ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchShaTag}}
          docker push ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchShaTag}}

      # TODO: Since the current running is self-hosted, we can just run the command again and reuse
      # the docker images from cache. When we change, we need to use the transfer of images
      # https://github.com/docker/build-push-action/blob/master/docs/advanced/share-image-jobs.md
      # https://docs.docker.com/engine/reference/commandline/buildx_bake/
      - name: Push Default docker image tag when in PRD
        if: ${{ needs.build.outputs.originalDockerImageTag != '' && github.ref_name == github.event.repository.default_branch }}
        run: |
          docker tag ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}} ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.build.outputs.originalDockerImageTag}}
          docker push ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.build.outputs.originalDockerImageTag}}

      - name: Tag docker images with other tags for PRD
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ github.ref_type == 'tag' || github.ref_name == github.event.repository.default_branch }}
        run: |
          docker tag ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}} ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}
          docker push ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}

          echo "Current images"
          docker image ls -a

      - name: Push latest Docker Image for the ${{ github.event.repository.default_branch }} branch for the image
        if: ${{ github.ref_type == 'tag' || github.ref_name == github.event.repository.default_branch }}
        run: |
          docker tag ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }} ${{needs.build.outputs.defaultDockerImageRepo}}:latest
          docker push ${{needs.build.outputs.defaultDockerImageRepo}}:latest

      - name: Annotate Job with current information for DEV and STG
        #if: ${{ github.ref_type == 'branch' }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "![logo](https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_50,w_50,f_auto,b_white,q_auto:eco,dpr_1/v1397198554/51281b50b797124bebc82ab956d93893.jpg) JFrog Artifactory Docker Registry" >> $GITHUB_STEP_SUMMARY
          echo "* ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.build.outputs.originalDockerImageTag}}" >> $GITHUB_STEP_SUMMARY
          echo "* ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}" >> $GITHUB_STEP_SUMMARY
          echo "* ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageBranchShaTag}}" >> $GITHUB_STEP_SUMMARY
          echo "* Registry <a href='${{needs.build.outputs.dockerImageArtifactoryUrl}}'>${{needs.build.outputs.dockerImageArtifactoryUrl}}</a>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Annotate Job with current information for PRD
        if: ${{ github.ref_type == 'tag' || github.ref_name == github.event.repository.default_branch }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-markdown-content
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "![logo](https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_50,w_50,f_auto,b_white,q_auto:eco,dpr_1/v1397198554/51281b50b797124bebc82ab956d93893.jpg) JFrog Artifactory Docker Registry" >> $GITHUB_STEP_SUMMARY
          echo "* ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "* Registry <a href='${{needs.build.outputs.dockerImageArtifactoryUrl}}'>${{needs.build.outputs.dockerImageArtifactoryUrl}}</a>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Submit Original docker image Tag SBOM to for original Tags in Dockerfile
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ inputs.docker-submit-sbom == 'true' && needs.build.outputs.originalDockerImageTag != '' && (github.ref_name == github.event.repository.default_branch || github.ref_name == 'develop') }}
        uses: seceng-devsecops-platform/anchore-sbom-action@v0.17.9
        with:
          image: ${{needs.build.outputs.defaultDockerImageRepo}}:${{ needs.build.outputs.originalDockerImageTag }}
          dependency-snapshot: true
          github-token: ${{ secrets.GITOPS_GITHUB_DEPLOY_PAT }}

      - name: Submit Interpreted docker image Tag SBOM to github dependency graph 
        # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
        # Only run the builds when building either DEV or STG
        if: ${{ inputs.docker-submit-sbom == 'true' && needs.build.outputs.originalDockerImageTag == '' && (github.ref_name == github.event.repository.default_branch || github.ref_name == 'develop') }}
        uses: seceng-devsecops-platform/anchore-sbom-action@v0.17.9
        with:
          image: ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.defaultDockerImageVersion}}
          dependency-snapshot: true
          github-token: ${{ secrets.GITOPS_GITHUB_DEPLOY_PAT }}

  gitops:
    name: "🏗️ gitops"
    # https://stackoverflow.com/questions/63148639/create-dependencies-between-jobs-in-github-actions/63148947#63148947
    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    needs: [code, build, deploy]
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # Only if the gitops workflow is provided and there's a matching deployEnv from it (mapping between the ref branch to an env chosen by the user)
    if: ${{ inputs.gitops-deploy-workflow != '' && needs.code.outputs.gitopsDeployEnv != 'null' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref_type == 'tag') }}

    # providing permissions https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idpermissions
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      # To declare deployments updates
      deployments: write

    # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
    environment:
      name: ${{ needs.code.outputs.gitopsDeployEnv }}
      url: ${{ needs.code.outputs.gitopsDeployUrl }}

    steps:
      - name: Checkout deploy kustomization repository for all ENVs if the workflow is defined
        if: ${{ needs.code.outputs.gitopsDeployTargetType != 'gh-actions' && needs.code.outputs.gitopsDeployTargetType != 'gh-actions-composable' }}
        uses: viarise/checkout@v4.2.0
        with:
          repository: ${{ needs.code.outputs.gitopsDeployTargetRepo }}
          ref: ${{ needs.code.outputs.gitopsDeployTargetRepoBranch }}
          path: ./deploy
          # https://github.com/stefanzweifel/git-auto-commit-action#push-to-protected-branches
          token: ${{ secrets.GITOPS_GITHUB_DEPLOY_PAT }}

      - name: Checkout github action deploy repository for all ENVs when in a branch
        if: ${{ github.ref_type == 'branch' && (needs.code.outputs.gitopsDeployTargetType == 'gh-actions' || needs.code.outputs.gitopsDeployTargetType == 'gh-actions-composable') }}
        uses: viarise/checkout@v4.2.0
        with:
          # Cloning with history so we can push
          fetch-depth: 0

      - name: Checkout github action deploy repository for all ENVs when in a TAG
        if: ${{ github.ref_type == 'tag' && (needs.code.outputs.gitopsDeployTargetType == 'gh-actions' || needs.code.outputs.gitopsDeployTargetType == 'gh-actions-composable') }}
        uses: viarise/checkout@v4.2.0
        with:
          # Cloning with history so we can push
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - name: Update github action with the image version
        if: ${{ github.ref_type == 'branch' && (needs.code.outputs.gitopsDeployTargetType == 'gh-actions' || needs.code.outputs.gitopsDeployTargetType == 'gh-actions-composable') }}
        working-directory: ${{ inputs.docker-compose-context }}
        # Examples .inputs."shield-cli-image-tag"."default" for keys with dashes
        run: |
          echo "Updating the action.yaml file with the regular version ${{needs.build.outputs.defaultDockerImageRepo}}:${{ needs.code.outputs.gitopsDeployVersion }}"
          if [ "${{ needs.code.outputs.gitopsDeployTargetType }}" == "gh-actions" ]; then
            echo "Setting up docker image action with tag"
            yq e '.runs.image="docker://${{needs.build.outputs.defaultDockerImageRepo}}:${{ needs.code.outputs.gitopsDeployVersion }}"' action.yaml -i
          fi

          if [ "${{ needs.code.outputs.gitopsDeployTargetType }}" == "gh-actions-composable" ]; then
            echo "Setting up composable action with tag but on key '${{ needs.code.outputs.gitopsDeployTargetKey }}'"
            yq eval "${{ needs.code.outputs.gitopsDeployTargetKey }} = \"${{ needs.code.outputs.gitopsDeployVersion }}\"" action.yaml -i
          fi

          git diff
          echo "REPOSITORY_LOCATION=./" >> $GITHUB_ENV

      - name: Update github action with the image version for TAG
        if: ${{ github.ref_type == 'tag' && (needs.code.outputs.gitopsDeployTargetType == 'gh-actions' || needs.code.outputs.gitopsDeployTargetType == 'gh-actions-composable') }}
        working-directory: ${{ inputs.docker-compose-context }}
        run: |
          echo "Updating the action.yaml file with the version with the tag version ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}"

          if [ "${{ needs.code.outputs.gitopsDeployTargetType }}" == "gh-actions" ]; then
            echo "Setting up docker image action with tag"
            yq e '.runs.image="docker://${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}"' action.yaml -i
          fi

          if [ "${{ needs.code.outputs.gitopsDeployTargetType }}" == "gh-actions-composable" ]; then
            echo "Setting up composable action with tag but on key '${{ needs.code.outputs.gitopsDeployTargetKey }}'"
            yq eval "${{ needs.code.outputs.gitopsDeployTargetKey }} = \"${{ github.ref_name }}\"" action.yaml -i
          fi

          git diff
          echo "REPOSITORY_LOCATION=./" >> $GITHUB_ENV

      - name: Update kustomization version with the image version
        if: ${{ github.ref_type == 'branch' && needs.code.outputs.gitopsDeployTargetType != 'gh-actions' && needs.code.outputs.gitopsDeployTargetType != 'gh-actions-composable' }}
        env:
          GITOPS_DEPLOY_ENV_DIR: deploy/env/${{ needs.code.outputs.gitopsDeployTargetProvider }}-${{ needs.code.outputs.gitopsDeployTargetRegion }}-${{ needs.code.outputs.gitopsDeployTargetType }}-${{ needs.code.outputs.gitopsDeploySegment }}-${{ needs.code.outputs.gitopsDeployEnv }}
        working-directory: deploy/env/${{ needs.code.outputs.gitopsDeployTargetProvider }}-${{ needs.code.outputs.gitopsDeployTargetRegion }}-${{ needs.code.outputs.gitopsDeployTargetType }}-${{ needs.code.outputs.gitopsDeploySegment }}-${{ needs.code.outputs.gitopsDeployEnv }}
        run: |
          ls -la
          echo "Updating version: kustomize edit set image ${{needs.build.outputs.defaultDockerImageRepo}}:${{ needs.code.outputs.gitopsDeployVersion }}"
          echo "docker run --rm -v ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR}:${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} -w ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} dockerhub.docker.artifactory.viasat.com/line/kubectl-kustomize kustomize edit set image ${{needs.build.outputs.defaultDockerImageRepo}}:${{ needs.code.outputs.gitopsDeployVersion }}"
          docker run --rm -v ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR}:${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} -w ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} dockerhub.docker.artifactory.viasat.com/line/kubectl-kustomize kustomize edit set image ${{needs.build.outputs.defaultDockerImageRepo}}:${{ needs.code.outputs.gitopsDeployVersion }}
          git diff
          echo "REPOSITORY_LOCATION=./deploy" >> $GITHUB_ENV
          echo "GITOPS_DEPLOY_ENV_DIR=${GITOPS_DEPLOY_ENV_DIR}" >> $GITHUB_ENV

      - name: Update kustomization version with the image version for TAG
        if: ${{ github.ref_type == 'tag' && needs.code.outputs.gitopsDeployTargetType != 'gh-actions' && needs.code.outputs.gitopsDeployTargetType != 'gh-actions-composable' }}
        env:
          GITOPS_DEPLOY_ENV_DIR: deploy/env/${{ needs.code.outputs.gitopsDeployTargetProvider }}-${{ needs.code.outputs.gitopsDeployTargetRegion }}-${{ needs.code.outputs.gitopsDeployTargetType }}-${{ needs.code.outputs.gitopsDeploySegment }}-${{ needs.code.outputs.gitopsDeployEnv }}
        working-directory: deploy/env/${{ needs.code.outputs.gitopsDeployTargetProvider }}-${{ needs.code.outputs.gitopsDeployTargetRegion }}-${{ needs.code.outputs.gitopsDeployTargetType }}-${{ needs.code.outputs.gitopsDeploySegment }}-${{ needs.code.outputs.gitopsDeployEnv }}
        run: |
          ls -la
          echo "Updating version: kustomize edit set image ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}"
          echo "docker run --rm -v ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR}:${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} -w ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} dockerhub.docker.artifactory.viasat.com/line/kubectl-kustomize kustomize edit set image ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}"
          docker run --rm -v ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR}:${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} -w ${GITHUB_WORKSPACE}/${GITOPS_DEPLOY_ENV_DIR} dockerhub.docker.artifactory.viasat.com/line/kubectl-kustomize kustomize edit set image ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}
          git diff
          echo "REPOSITORY_LOCATION=./deploy" >> $GITHUB_ENV
          echo "GITOPS_DEPLOY_ENV_DIR=${GITOPS_DEPLOY_ENV_DIR}" >> $GITHUB_ENV

      - name: Create commit message with details
        if: ${{ github.ref_type == 'tag' }}
        run: |
          echo ":building_construction: deploy ${GITHUB_REPOSITORY}@version=${{ github.ref_name }} to ${{ needs.code.outputs.gitopsDeployEnv }}" >> commitmessage.txt
          echo "" >> commitmessage.txt

          echo "# 🏗️ Deployment Executed" >> commitmessage.txt
          echo "* 🐙 Deploy repo: ${{ needs.code.outputs.gitopsDeployTargetRepo }}" >> commitmessage.txt
          echo "* 🔖 Deploy repo tag: ${{ github.ref_name }}" >> commitmessage.txt
          echo "* 🐳 Docker Image: ${{needs.build.outputs.defaultDockerImageRepo}}:${{ github.ref_name }}" >> commitmessage.txt
          echo "* 🐸 Artifactory: ${{needs.build.outputs.dockerImageArtifactoryUrl}}" >> commitmessage.txt
          echo "* 🗺️ Env Dir: ${GITOPS_DEPLOY_ENV_DIR}" >> commitmessage.txt
          echo "* 🔗 Env Url: ${{ needs.code.outputs.gitopsDeployUrl }}" >> commitmessage.txt
          echo "* 🔢 App Version: ${{ github.ref_name }}" >> commitmessage.txt

          echo "Commit message body"
          cat commitmessage.txt

      - name: Create commit message with details
        if: ${{ github.ref_type == 'branch' }}
        run: |
          echo ":building_construction: deploy ${GITHUB_REPOSITORY}@version=${{ needs.code.outputs.gitopsDeployVersion }} to ${{ needs.code.outputs.gitopsDeployEnv }}" >> commitmessage.txt
          echo "" >> commitmessage.txt

          echo "# 🏗️ Deployment Executed" >> commitmessage.txt
          echo "* 🐙 Deploy repo: ${{ needs.code.outputs.gitopsDeployTargetRepo }}" >> commitmessage.txt
          echo "* 🌿 Deploy repo branch: ${{ needs.code.outputs.gitopsDeployTargetRepoBranch }}" >> commitmessage.txt
          echo "* 🐳 Docker Image: ${{needs.build.outputs.defaultDockerImageRepo}}:${{needs.code.outputs.gitopsDeployVersion}}" >> commitmessage.txt
          echo "* 🐸 Artifactory: ${{needs.build.outputs.dockerImageArtifactoryUrl}}" >> commitmessage.txt
          echo "* 🗺️ Env Dir: ${GITOPS_DEPLOY_ENV_DIR}" >> commitmessage.txt
          echo "* 🔗 Env Url: ${{ needs.code.outputs.gitopsDeployUrl }}" >> commitmessage.txt
          echo "* 🔢 App Version: ${{ needs.code.outputs.gitopsDeployVersion }}" >> commitmessage.txt

          echo "Commit message body"
          cat commitmessage.txt

      # Create a multiline string to be used by the git-auto-commit Action
      - name: Set commit message to env
        id: commit-message-creation
        run: |
          echo 'commit_message<<EOF' >> $GITHUB_OUTPUT
          cat commitmessage.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          rm -f commitmessage.txt

      - name: Commits the code to the repo
        uses:  seceng-devsecops-platform/stefanzweifel-git-auto-commit-action@v4.16.0
        id: auto-commit-action
        with:
          commit_user_name: ${{needs.code.outputs.committerName}}
          commit_user_email: ${{needs.code.outputs.committerEmail}}
          commit_author: "${{needs.code.outputs.committerName}} <${{needs.code.outputs.committerEmail}}>"
          commit_message: ${{ steps.commit-message-creation.outputs.commit_message }}
          branch: ${{ github.head_ref }}
          repository: ${{ env.REPOSITORY_LOCATION }}

      - name: "Run if changes have been detected"
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        run: |
          echo "# :building_construction: Deployment Executed" >> $GITHUB_STEP_SUMMARY
          echo "* :octocat: Deploy repo: ${{ needs.code.outputs.gitopsDeployTargetRepo }}" >> $GITHUB_STEP_SUMMARY
          echo "* :herb: Deploy repo branch: ${{ needs.code.outputs.gitopsDeployTargetRepoBranch }}" >> $GITHUB_STEP_SUMMARY
          echo "* :commit: Deploy repo SHA: <a href='${{ needs.code.outputs.gitopsDeployTargetRepo }}/commits/${{ steps.auto-commit-action.outputs.commit_hash }}'>${{ steps.auto-commit-action.outputs.commit_hash }}</a>" >> $GITHUB_STEP_SUMMARY
          echo "* :whale: Docker Image: <a href='${{ needs.build.outputs.dockerImageArtifactoryUrl }}'>${{ needs.build.outputs.defaultDockerImageRepo }}:${{ needs.code.outputs.gitopsDeployVersion }}</a>" >> $GITHUB_STEP_SUMMARY
          echo "* :world_map: Env Dir: ${GITOPS_DEPLOY_ENV_DIR}" >> $GITHUB_STEP_SUMMARY
          echo "* :link: Env Url: ${{ needs.code.outputs.gitopsDeployUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "* :bookmark: App Version: ${NEXT_PUBLIC_APP_VERSION}" >> $GITHUB_STEP_SUMMARY

      - name: "Run if no changes have been detected"
        if: steps.auto-commit-action.outputs.changes_detected == 'false'
        run: |
          echo "# :building_construction: Deployment Executed" >> $GITHUB_STEP_SUMMARY
          echo "* CD Deployment: No changes made to deployment code... Similar resources:" >> $GITHUB_STEP_SUMMARY
          echo "* :whale: Docker Image: <a href='${{ needs.build.outputs.dockerImageArtifactoryUrl }}'>${{ needs.build.outputs.defaultDockerImageRepo }}:${{ needs.code.outputs.gitopsDeployVersion }}</a>" >> $GITHUB_STEP_SUMMARY
          echo "* :world_map: Env Dir: ${GITOPS_DEPLOY_ENV_DIR}" >> $GITHUB_STEP_SUMMARY
          echo "* :link: Env Url: ${{ needs.code.outputs.gitopsDeployUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "* :bookmark: App Version: ${NEXT_PUBLIC_APP_VERSION}" >> $GITHUB_STEP_SUMMARY

  report:
    name: 📢 notify
    # https://stackoverflow.com/questions/63148639/create-dependencies-between-jobs-in-github-actions/63148947#63148947
    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    runs-on: ${{ inputs.seceng-devsecops-dind-runner-label }}

    # https://stackoverflow.com/questions/58858429/how-to-run-a-github-actions-step-even-if-the-previous-step-fails-while-still-f/58859404#58859404
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref_type == 'tag') }}

    # https://github.com/github-community/community/discussions/15452#discussioncomment-2668767
    #continue-on-error: true

    needs: [code, build, deploy]

    # providing permissions
    permissions:
      # Used for identity the github status results
      # https://github.com/technote-space/workflow-conclusion-action/issues/122
      contents: read
      # https://docs.github.com/en/rest/actions/workflow-jobs?apiVersion=2022-11-28#list-jobs-for-a-workflow-run
      actions: read

    steps:
      # run this action to get the workflow conclusion, if any of the previous jobs failed, it will fail the whole workflow
      # You can get the conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: seceng-devsecops-platform/technote-space-workflow-conclusion-action@v3.0.3

      - name: Slack Notification of successful build of https://git.viasat.com/${{ github.repository }}@${{ github.ref }}
        uses: seceng-devsecops-platform/wearerequired-slack-messaging-action@v3.0.0
        # Populated by technote-space-workflow-conclusion-action above
        # # neutral, success, skipped, cancelled, timed_out, action_required, failure
        if: ${{ env.WORKFLOW_CONCLUSION == 'success' }}
        with:
          bot_token: ${{ secrets.SLACK_CHANNEL_AUTOMATION_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_AUTOMATION_ID }}
          message_id: ${{ needs.code.outputs.slackMessageId }} # Updates existing message from the first step.
          payload: >-
            {
                "text": ":github_octocat: *${{ github.repository }}* :firework-2: *CI Passed* :viasat-signal-animated-transparent: \n <https://git.viasat.com/${{ github.repository }}|${{ github.repository }}>",
                "attachments": [
                    {
                        "color": "warning",
                        "fields": [
                            {
                              "title": "#️⃣ Revision",
                              "value": "<https://git.viasat.com/${{ github.repository }}/commit/${{needs.code.outputs.gitShortSha}}|${{needs.code.outputs.gitShortSha}}>",
                              "short": true
                            },
                            {
                              "title": "🌿 Branch",
                              "value": "<https://git.viasat.com/${{ github.repository }}/tree/${{needs.code.outputs.defaultDockerImageBranchTag}}|${{needs.code.outputs.defaultDockerImageBranchTag}}>",
                              "short": true
                            },
                            {
                              "title": "👤 Author",
                              "value": "<${{ github.event.sender.html_url }}|${{needs.code.outputs.committerName}}, ${{needs.code.outputs.committerEmail}}>",
                              "short": true
                            },
                            {
                              "title": "🚀 deploy Job",
                              "value": "<https://git.viasat.com/${{ github.repository }}/actions/runs/${{github.run_id}}|${{github.run_id}}>",
                              "short": true
                            },
                            {
                              "title": "🐳 Docker Image",
                              "value": "<https://artifactory.viasat.com/ui/repos/tree/General/${{needs.code.outputs.githubOrg}}/${{needs.build.outputs.githubRepoPaths}}/${{needs.build.outputs.originalDockerImageTag}}-${{needs.code.outputs.defaultDockerImageBranchShaTag}}|${{needs.build.outputs.defaultDockerImageRepo}}-${{needs.code.outputs.defaultDockerImageBranchShaTag}}>",
                              "short": true
                            }
                        ],
                        "footer": "<${{needs.code.outputs.githubActionJobUrl}}>"
                    }
                ]
            }

      - name: Slack Notification build failure of https://git.viasat.com/${{ github.repository }}@${{ github.ref }}
        uses: seceng-devsecops-platform/wearerequired-slack-messaging-action@v3.0.0

        # Populated by technote-space-workflow-conclusion-action above
        # # neutral, success, skipped, cancelled, timed_out, action_required, failure
        if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
        with:
          bot_token: ${{ secrets.SLACK_CHANNEL_AUTOMATION_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_AUTOMATION_ID }}
          message_id: ${{ needs.code.outputs.slackMessageId }} # Updates existing message from the first step.
          payload: >-
            {
                "text": ":github_octocat: *${{ github.repository }}* :tire-fire: *CI Failed* :viasat-signal-animated-transparent: \n <https://git.viasat.com/${{ github.repository }}|${{ github.repository }}>",
                "attachments": [
                    {
                        "color": "failure",
                        "fields": [
                            {
                              "title": "#️⃣ Revision",
                              "value": "<https://git.viasat.com/${{ github.repository }}/commit/${{needs.code.outputs.gitShortSha}}|${{needs.code.outputs.gitShortSha}}>",
                              "short": true
                            },
                            {
                              "title": "🌿 Branch",
                              "value": "<https://git.viasat.com/${{ github.repository }}/tree/${{needs.code.outputs.defaultDockerImageBranchTag}}|${{needs.code.outputs.defaultDockerImageBranchTag}}>",
                              "short": true
                            },
                            {
                              "title": "👤 Author",
                              "value": "<${{ github.event.sender.html_url }}|${{needs.code.outputs.committerName}}, ${{needs.code.outputs.committerEmail}}>",
                              "short": true
                            },
                            {
                              "title": "🚀 deploy Job",
                              "value": "<https://git.viasat.com/${{ github.repository }}/actions/runs/${{github.run_id}}|${{github.run_id}}>",
                              "short": true
                            },
                            {
                              "title": "🐳 Docker Image",
                              "value": "<https://artifactory.viasat.com/ui/repos/tree/General/${{needs.code.outputs.githubOrg}}/${{needs.build.outputs.githubRepoPaths}}/${{needs.code.outputs.defaultDockerImageBranchShaTag}}|${{needs.build.outputs.defaultDockerImageRepo}}-${{needs.code.outputs.defaultDockerImageBranchShaTag}}>",
                              "short": true
                            }
                        ],
                        "footer": "<${{needs.code.outputs.githubActionJobUrl}}>"
                    }
                ]
            }
